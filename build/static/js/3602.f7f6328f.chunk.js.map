{"version":3,"file":"static/js/3602.f7f6328f.chunk.js","mappings":"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","sources":["views/admin/lead/components/LeadImport.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Papa from 'papaparse';\nimport {\n    Flex,\n    useColorModeValue,\n    Select,\n    Button,\n    Text,\n    Grid,\n    GridItem\n} from \"@chakra-ui/react\";\nimport { useFormik } from \"formik\";\nimport { postApi } from 'services/api';\nimport { toast } from 'react-toastify';\nimport moment from 'moment';\nimport ExcelJS from 'exceljs';\nimport Card from 'components/card/Card';\n\nfunction LeadImport() {\n\n    const location = useLocation();\n    const { fileData, customFields } = location.state || {};\n    const [importedFileFields, setImportedFileFields] = useState([]);\n    const [importedFileData, setImportedFileData] = useState([]);\n    const [isLoding, setIsLoding] = useState(false);\n    const navigate = useNavigate();\n    const [filterLead, setFilterLead] = useState([]);\n\n    const columns = [\n        { Header: 'Fields In Crm', accessor: 'crmFields' },\n        { Header: 'Fields In File', accessor: 'fileFields' },\n    ];\n\n    const initialFieldValues = Object.fromEntries(\n        (customFields || []).map(field => [field?.name, ''])\n    );\n    const initialValues = {\n        ...initialFieldValues\n    };\n\n    const fieldsInCrm = [\n        ...customFields?.map((field) => ({ Header: field?.label, accessor: field?.name, type: field?.type, formikType: field?.validations?.find(obj => obj.hasOwnProperty('formikType')) }))\n    ];\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        onSubmit: (values, { resetForm }) => {\n\n            const leadsData = importedFileData?.map((item, ind) => {\n                const lead = {\n                    createdDate: new Date(),\n                    deleted: item[values.deleted || \"deleted\"] || false,\n                    createBy: JSON.parse(localStorage.getItem('user'))._id,\n                };\n\n                fieldsInCrm?.forEach(field => {\n                    const selectedField = values[field?.accessor];\n                    const fieldValue = item[selectedField] || '';\n\n                    if (field?.type?.toLowerCase() === \"date\") {\n                        lead[field?.accessor] = moment(fieldValue).isValid() ? fieldValue : '';\n                    } else if (field?.type?.toLowerCase() === \"number\" && ['positive', 'negative'].includes(field?.formikType?.toLowerCase())) {\n                        lead[field?.accessor] = parseFloat(fieldValue) || '';\n                    } else if (field?.type?.toLowerCase() === \"number\") {\n                        lead[field?.accessor] = parseInt(fieldValue, 10) || '';\n                    } else {\n                        lead[field?.accessor] = fieldValue;\n                    }\n                });\n\n                return lead;\n            });\n\n            AddData(leadsData);\n        }\n    })\n\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\n\n    const AddData = async (leads) => {\n        try {\n            setIsLoding(true);\n            let response = await postApi('api/lead/addMany', leads)\n            if (response.status === 200) {\n                toast.success(`Leads imported successfully`)\n                resetForm();\n                navigate('/lead');\n            }\n        } catch (e) {\n            console.error(e);\n            toast.error(`Leads import failed`)\n            resetForm();\n            navigate('/lead');\n        }\n        finally {\n            setIsLoding(false)\n        }\n    };\n\n    const parseFileData = async (file) => {\n        const reader = new FileReader();\n        const extension = file.name.split('.').pop().toLowerCase();\n\n        reader.onload = async ({ target }) => {\n\n            if (extension === 'csv') {\n                const csv = Papa.parse(target.result, {\n                    header: true,\n                });\n                const parsedData = csv?.data;\n\n                if (parsedData && parsedData.length > 0) {\n                    setImportedFileData(parsedData);\n                    const fileHeadingFields = Object.keys(parsedData[0]);\n                    setImportedFileFields(fileHeadingFields);\n                } else {\n                    toast.error(\"Empty or invalid CSV file\");\n                    navigate(\"/lead\");\n                }\n\n            } else if (extension === 'xlsx') {\n                const data = new Uint8Array(target.result);\n                const workbook = new ExcelJS.Workbook();\n\n                await workbook.xlsx.load(data);\n\n                const worksheet = workbook.getWorksheet(1);\n                const jsonData = [];\n\n                // Iterate over rows and cells\n                worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {\n                    const rowData = {};\n                    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n                        rowData[worksheet.getCell(1, colNumber).value] = cell.value;\n                    });\n                    jsonData.push(rowData);\n                });\n                jsonData?.splice(0, 1);\n                setImportedFileData(jsonData);\n\n                if (jsonData && jsonData.length > 0) {\n                    const fileHeadingFields = Object.keys(jsonData[0]);\n                    setImportedFileFields(fileHeadingFields);\n                } else {\n                    toast.error(\"Empty or invalid XLSX file\");\n                    navigate(\"/lead\");\n                }\n            }\n        };\n\n        if (extension === 'csv') {\n            reader.readAsText(file);\n        } else if (extension === 'xlsx') {\n            const blob = new Blob([file]);\n            reader.readAsArrayBuffer(blob);\n        }\n    };\n\n    useEffect(() => {\n        if (fileData && fileData.length > 0) {\n            const firstFile = fileData[0];\n            parseFileData(firstFile);\n        }\n    }, [fileData]);\n\n    useEffect(() => {\n        const filterLeadData = importedFileFields?.filter(field => {\n            const result = fieldsInCrm?.find(data => field === data?.accessor || field === data?.Header);\n            if (result) {\n                setFieldValue(result?.accessor, field);\n                return true;\n            }\n            return false;\n        });\n        setFilterLead(filterLeadData);\n    }, [importedFileFields]);\n\n    return (\n        <>\n            <Card overflowY={\"auto\"} className=\"importTable\">\n                <Text color={\"secondaryGray.900\"}\n                    fontSize=\"22px\"\n                    fontWeight=\"700\"\n                    mb='20px'\n                >Import Leads</Text>\n                <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} pb={2} gap={1} borderBottom={'1px solid #e2e8f0'}>\n                    {\n                        columns.map((column, index) => (\n                            <GridItem key={index} colSpan={{ base: 6 }} fontWeight={'600'} fontSize={{ sm: \"14px\", lg: \"14px\" }} color=\"secondaryGray.900\" style={{ textTransform: \"uppercase\" }}>\n                                {column.Header}\n                            </GridItem>\n                        ))\n                    }\n                </Grid>\n                <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} gap={1} overflowY={'auto'}>\n                    {\n                        fieldsInCrm?.map((item, index) => (\n                            <>\n                                <GridItem colSpan={{ base: 6 }} key={item.id} mt='10px'>\n                                    {item.Header}\n                                </GridItem>\n                                <GridItem colSpan={{ base: 4 }}>\n                                    <Select\n                                        variant=\"flushed\"\n                                        fontWeight='500'\n                                        isSearchable\n                                        value={values[item.accessor]}\n                                        name={item.accessor}\n                                        onChange={handleChange}\n                                    >\n                                        <option value=''> {filterLead ? filterLead.find((data) => (item.Header === data || item.accessor === data) && data) ? filterLead.find((data) => (item.Header === data || item.accessor === data) && data) : 'Select Field In File' : 'Select Field In File'}</option>\n                                        {\n                                            importedFileFields?.map(field => (\n                                                <option value={field} key={field}>{field}</option>\n                                            ))\n                                        }\n                                    </Select>\n                                </GridItem>\n                            </>\n                        ))\n                    }\n                </Grid>\n                <Flex Flex justifyContent={'end'} mt='5' >\n                    <Button size=\"sm\" onClick={() => handleSubmit()} variant=\"brand\">Save</Button>\n                </Flex>\n            </Card>\n        </>\n    )\n}\n\nexport default LeadImport"],"names":["location","useLocation","fileData","customFields","state","importedFileFields","setImportedFileFields","useState","importedFileData","setImportedFileData","isLoding","setIsLoding","navigate","useNavigate","filterLead","setFilterLead","initialFieldValues","Object","fromEntries","map","field","name","initialValues","_objectSpread","fieldsInCrm","_field$validations","Header","label","accessor","type","formikType","validations","find","obj","hasOwnProperty","formik","useFormik","onSubmit","values","_ref","resetForm","leadsData","item","ind","lead","createdDate","Date","deleted","createBy","JSON","parse","localStorage","getItem","_id","forEach","_field$type","_field$type2","_field$formikType","_field$type3","selectedField","fieldValue","toLowerCase","moment","isValid","includes","parseFloat","parseInt","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","postApi","leads","status","toast","success","e","console","error","useEffect","length","reader","FileReader","extension","file","split","pop","onload","target","_ref2","csv","Papa","result","header","parsedData","data","fileHeadingFields","keys","Uint8Array","workbook","ExcelJS","xlsx","load","worksheet","getWorksheet","jsonData","eachRow","includeEmpty","row","rowNumber","rowData","eachCell","cell","colNumber","getCell","value","push","splice","readAsText","blob","Blob","readAsArrayBuffer","parseFileData","filterLeadData","filter","_jsx","_Fragment","children","_jsxs","Card","overflowY","className","Text","color","fontSize","fontWeight","mb","Grid","templateColumns","pb","gap","borderBottom","column","index","GridItem","colSpan","base","sm","lg","style","textTransform","mt","id","Select","variant","isSearchable","onChange","Flex","justifyContent","Button","size","onClick"],"sourceRoot":""}