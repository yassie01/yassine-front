{"version":3,"file":"static/js/9814.2bca5b7d.chunk.js","mappings":"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","sources":["views/admin/emailHistory/components/AddEmail.js","views/admin/document/component/Upload.js","views/admin/phoneCall/components/AddPhoneCall.js","views/admin/document/component/Delete.js","views/admin/document/component/LinkModel.js","components/FolderTreeView/folderTreeView.js","components/commonTableModel/MultiContactModel.js","components/commonTableModel/Lead.js","components/commonTableModel/MultiLeadModel.js","views/admin/meeting/components/Addmeeting.js","utils/formDataUse.js","utils/addDocumentModal.js"],"sourcesContent":["import { Button, FormLabel, Grid, GridItem, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';\nimport Spinner from 'components/spinner/Spinner';\nimport dayjs from 'dayjs';\nimport { useFormik } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { emailSchema } from 'schema';\nimport { postApi } from 'services/api';\nimport { fetchEmailTempData } from '../../../../redux/slices/emailTempSlice';\n\n\nconst AddEmailHistory = (props) => {\n    const { onClose, isOpen, fetchData, setAction } = props\n    const user = JSON.parse(localStorage.getItem('user'))\n    const [isLoding, setIsLoding] = useState(false)\n    const todayTime = new Date().toISOString().split('.')[0];\n    const [data, setData] = useState([]);\n    const dispatch = useDispatch();\n\n    const initialValues = {\n        sender: user?._id,\n        recipient: props.lead !== true ? props?.contactEmail : props?.leadEmail,\n        subject: '',\n        message: '',\n        createByContact: props?.id && props?.lead !== true ? props?.id : '',\n        createByLead: props?.id && props?.lead === true ? props?.id : '',\n        startDate: '',\n        type: 'message',\n        html: '',\n        createBy: user?._id,\n    }\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: emailSchema,\n        enableReinitialize: true,\n        onSubmit: (values, { resetForm }) => {\n            AddData();\n            resetForm();\n        },\n    });\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik\n\n    const AddData = async () => {\n        try {\n            setIsLoding(true)\n            let response = await postApi('api/email/add', values)\n            if (response.status === 200) {\n                props.onClose();\n                fetchData(1)\n                // setAction((pre) => !pre)\n            }\n        } catch (e) {\n            console.log(e);\n        }\n        finally {\n            setIsLoding(false)\n        }\n    };\n    const fetchEmailTemp = async () => {\n        setIsLoding(true)\n        const result = await dispatch(fetchEmailTempData())\n        if (result.payload.status === 200) {\n            setData(result?.payload?.data);\n        } else {\n            toast.error(\"Failed to fetch data\", \"error\");\n        }\n        setIsLoding(false)\n    }\n    useEffect(() => {\n        if (values?.type === \"template\") fetchEmailTemp()\n    }, [values?.type])\n    // useEffect(() => {\n    //    if (props.id && props.lead !== true) {\n    //         setFieldValue('createByContact', props.id);\n    //     } else if (props.id && props.lead === true) {\n    //         setFieldValue('createByLead', props.id);\n    //     }\n    // }, [props.id, props.lead])\n\n    return (\n        <Modal onClose={onClose} isOpen={isOpen} isCentered>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Send Email </ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Recipient<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.recipient}\n                                name=\"recipient\"\n                                disabled\n                                placeholder='Recipient'\n                                fontWeight='500'\n                                borderColor={errors.recipient && touched.recipient ? \"red.300\" : null}\n                            />\n                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Subject<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                placeholder='Enter subject'\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.subject}\n                                name=\"subject\"\n                                fontWeight='500'\n                                borderColor={errors.subject && touched.subject ? \"red.300\" : null}\n                            />\n                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.subject && touched.subject && errors.subject}</Text>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }} >\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Start Date<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                type=\"datetime-local\"\n                                fontSize='sm'\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}\n                                value={values.startDate}\n                                name=\"startDate\"\n                                fontWeight='500'\n                                borderColor={errors?.startDate && touched?.startDate ? \"red.300\" : null}\n                            />\n                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>\n                        </GridItem>\n\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Message\n                            </FormLabel>\n                            <RadioGroup onChange={(e) => { setFieldValue('type', e) }} value={values.type}>\n                                <Stack direction='row'>\n                                    <Radio value='message'>Message</Radio>\n                                    <Radio value='template'>Template</Radio>\n                                </Stack>\n                            </RadioGroup>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }}>\n                            {\n                                values?.type === \"message\" ?\n                                    <>\n                                        <Textarea\n                                            resize={'none'}\n                                            fontSize='sm'\n                                            placeholder='Enter Message'\n                                            onChange={handleChange} onBlur={handleBlur}\n                                            value={values.message}\n                                            name=\"message\"\n                                            fontWeight='500'\n                                            borderColor={errors.message && touched.message ? \"red.300\" : null}\n                                        />\n                                        <Text fontSize='sm' mb='10px' color={'red'}> {errors.message && touched.message && errors.message}</Text>\n                                    </>\n                                    :\n                                    <Select\n                                        // value={values.assignTo}\n                                        name=\"html\"\n                                        onChange={handleChange} onBlur={handleBlur}\n                                        value={values.html}\n                                        fontWeight='500'\n                                        placeholder={'Select Template'}\n                                    // borderColor={errors.assignTo && touched.assignTo ? \"red.300\" : null}\n                                    >\n                                        {data?.map((item) => {\n                                            return <option value={item?.html} key={item._id}>{item?.templateName}</option>\n                                        })}\n                                    </Select>\n                            }\n                        </GridItem>\n\n                    </Grid>\n\n\n                </ModalBody>\n                <ModalFooter>\n                    <Button size=\"sm\" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>\n                    <Button sx={{\n                        marginLeft: 2,\n                        textTransform: \"capitalize\",\n                    }} variant=\"outline\"\n                        colorScheme=\"red\" size=\"sm\" onClick={() => {\n                            formik.resetForm()\n                            onClose()\n                        }}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default AddEmailHistory\n","// Chakra imports\nimport {\n  Box, Flex,\n  Grid,\n  GridItem,\n  Icon,\n  Text,\n  useColorModeValue\n} from \"@chakra-ui/react\";\n// Assets\nimport Dropzone from \"components/Dropzone\";\nimport { MdUpload } from \"react-icons/md\";\n\nexport default function Upload(props) {\n  const { used, total, count, ...rest } = props;\n  // Chakra Color Mode\n  const textColorPrimary = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const brandColor = useColorModeValue(\"brand.500\", \"white\");\n  const textColorSecondary = \"gray.400\";\n  return (\n    <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} gap={2}>\n      <GridItem colSpan={{ base: 12, '2xl': 5 }} >\n        <Dropzone\n          w={{ base: \"100%\", \"2xl\": \"240px\" }}\n          me='36px'\n          minH={200}\n          height={'100%'}\n          onFileSelect={props.onFileSelect}\n          content={\n            <Box>\n              <Icon as={MdUpload} w='70px' h='70px' color={brandColor} />\n              <Flex justify='center' mx='auto' mb='12px'>\n                <Text fontSize='xl' fontWeight='700' color={brandColor}>\n                  Upload Files\n                </Text>\n              </Flex>\n              <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>\n                {count > 0 && <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>\n                  Selected Files : {count}\n                </Text>}\n              </Text>\n            </Box>\n          }\n        />\n      </GridItem>\n      <GridItem colSpan={{ base: 12, '2xl': 7 }} >\n        <Flex direction='column' >\n          <Text\n            color={textColorPrimary}\n            fontWeight='bold'\n            textAlign='start'\n            fontSize='2xl'\n            mt={{ base: \"20px\", \"2xl\": \"50px\" }}>\n            Upload Files\n          </Text>\n          <Text\n            color={textColorSecondary}\n            fontSize='md'\n            my={{ base: \"auto\", \"2xl\": \"10px\" }}\n            mx='auto'\n            textAlign='start'>\n            Accepted File Types (Images, PDFs, Word docs, Powerpoint, Excel, ZIP, and video files - 15MB max)\n          </Text>\n        </Flex>\n      </GridItem>\n    </Grid>\n  );\n}\n\n","import { Button, FormLabel, Grid, GridItem, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text, Textarea } from '@chakra-ui/react';\nimport Spinner from 'components/spinner/Spinner';\nimport dayjs from 'dayjs';\nimport { useFormik } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { phoneCallSchema } from 'schema';\nimport { getApi, postApi } from 'services/api';\n\nconst AddPhoneCall = (props) => {\n    const { onClose, isOpen, fetchData, setAction, cData, LData } = props\n    const [isLoding, setIsLoding] = useState(false)\n    const todayTime = new Date().toISOString().split('.')[0];\n    const user = JSON.parse(localStorage.getItem('user'))\n\n    const initialValues = {\n        sender: user?._id,\n        recipient: '',\n        callDuration: '',\n        callNotes: '',\n        createByContact: '',\n        createByLead: '',\n        startDate: '',\n        createBy: user?._id,\n    }\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: phoneCallSchema,\n        onSubmit: (values, { resetForm }) => {\n            AddData();\n            resetForm();\n        },\n    });\n\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik\n\n    const AddData = async () => {\n        try {\n            setIsLoding(true)\n            let response = await postApi('api/phoneCall/add', values)\n            if (response.status === 200) {\n                props.onClose();\n                fetchData(1)\n                // setAction((pre) => !pre)\n            }\n        } catch (e) {\n            console.log(e);\n        }\n        finally {\n            setIsLoding(false)\n        }\n    };\n\n    // const fetchDataR = async () => {\n    //     if (props?.viewData?.lead?.leadPhoneNumber) {\n    //         if (props.id && props.lead !== true) {\n    //             setFieldValue('recipient', props?.viewData?.contact?.phoneNumber);\n    //             setFieldValue('createByContact', props?.id);\n    //             values.recipient = props?.viewData?.contact?.phoneNumber\n    //         } else if (props.id && props.lead === true) {\n    //             let response = await getApi('api/lead/view/', props.id)\n    //             if (response?.status === 200) {\n    //                 setFieldValue('recipient', response?.data?.lead?.leadPhoneNumber);\n    //                 setFieldValue('createByLead', props.id);\n    //                 values.recipient = response?.data?.lead?.leadPhoneNumber\n    //             }\n    //         }\n    //     } else {\n    //         if (props.id && props.lead !== true) {\n    //             if (cData) {\n    //                 setFieldValue('recipient', cData?.phoneNumber);\n    //                 setFieldValue('createByContact', props?.id);\n    //                 values.recipient = cData?.phoneNumber\n    //             }\n    //             // let response = await getApi('api/contact/view/', props.id)\n    //             // if (response?.status === 200) {\n    //             //     setFieldValue('recipient', response?.data?.contact?.phoneNumber);\n    //             //     setFieldValue('createByContact', props?.id);\n    //             //     values.recipient = response?.data?.contact?.phoneNumber\n    //             // }\n    //         } else if (props.id && props.lead === true) {\n    //             let response = await getApi('api/lead/view/', props.id)\n    //             if (response?.status === 200) {\n    //                 setFieldValue('recipient', response?.data?.lead?.leadPhoneNumber);\n    //                 setFieldValue('createByLead', props.id);\n    //                 values.recipient = response?.data?.lead?.leadPhoneNumber\n    //             }\n    //         }\n    //     }\n    // }\n\n    const fetchDataR = async () => {\n        if (LData && LData._id && props.lead === true) {\n            setFieldValue('recipient', LData.leadPhoneNumber);\n            setFieldValue('createByLead', props?.id);\n            values.recipient = LData.leadPhoneNumber\n        } else if (cData && cData._id && props.lead !== true) {\n            setFieldValue('recipient', cData?.phoneNumber);\n            setFieldValue('createByContact', props?.id);\n            values.recipient = cData?.phoneNumber\n        }\n    }\n    useEffect(() => {\n        fetchDataR()\n    }, [props.id, cData, LData])\n\n\n    return (\n        <Modal onClose={onClose} isOpen={isOpen} isCentered>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Add Call </ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Recipient<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                type='number'\n                                disabled\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.recipient}\n                                name=\"recipient\"\n                                placeholder='Recipient'\n                                fontWeight='500'\n                                borderColor={errors.recipient && touched.recipient ? \"red.300\" : null}\n                            />\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Start Date<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                type=\"datetime-local\"\n                                fontSize='sm'\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}\n                                value={values.startDate}\n                                name=\"startDate\"\n                                fontWeight='500'\n                                borderColor={errors?.startDate && touched?.startDate ? \"red.300\" : null}\n                            />\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>\n                        </GridItem>\n\n                        <GridItem colSpan={{ base: 12, md: 6 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Call Duration<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.callDuration}\n                                name=\"callDuration\"\n                                placeholder='call Duration'\n                                fontWeight='500'\n                                borderColor={errors.callDuration && touched.callDuration ? \"red.300\" : null}\n                            />\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.callDuration && touched.callDuration && errors.callDuration}</Text>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Call Notes\n                            </FormLabel>\n                            <Textarea\n                                resize={'none'}\n                                fontSize='sm'\n                                placeholder='Enter Call Notes'\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.callNotes}\n                                name=\"callNotes\"\n                                fontWeight='500'\n                                borderColor={errors.callNotes && touched.callNotes ? \"red.300\" : null}\n                            />\n                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.callNotes && touched.callNotes && errors.callNotes}</Text>\n                        </GridItem>\n                    </Grid>\n                </ModalBody>\n                <ModalFooter>\n                    <Button size=\"sm\" variant='brand' disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>\n                    <Button size=\"sm\" sx={{\n                        marginLeft: 2,\n                        textTransform: \"capitalize\",\n                    }} variant=\"outline\"\n                        colorScheme=\"red\" onClick={() => {\n                            formik.resetForm()\n                            onClose()\n                        }}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default AddPhoneCall\n","import { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport { deleteManyApi } from 'services/api';\n\nconst Delete = (props) => {\n    const handleDeleteClick = async () => {\n        if (props.method === 'one') {\n            props.deleteFile(props.id)\n            props.onClose(false)\n        } else if (props.method === 'many') {\n            try {\n                let response = await deleteManyApi(props.url, props.data)\n                if (response.status === 200) {\n                    props.setSelectedValues([])\n                    props.onClose(false)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    };\n\n    const handleClose = () => {\n        props.onClose(false)\n    }\n\n    return (\n        <div>\n            <Modal onClose={props.onClose} isOpen={props.isOpen} isCentered>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>Delete Document{props.method === 'one' ? '' : 's'}</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        Are You Sure To Delete selected Document{props.method === 'one' ? '' : 's'} ?\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button size=\"sm\" colorScheme=\"red\" mr={2} onClick={handleDeleteClick}>Yes</Button>\n                        <Button size=\"sm\" variant=\"outline\" onClick={handleClose}>No</Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </div>\n    )\n}\n\nexport default Delete\n","import { LinkIcon } from '@chakra-ui/icons';\nimport { Button, Flex, FormLabel, Grid, GridItem, IconButton, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, useDisclosure } from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { getApi, postApi } from 'services/api';\nimport ContactModel from 'components/commonTableModel/ContactModel';\nimport LeadModel from \"components/commonTableModel/LeadModel\";\nimport { LiaMousePointerSolid } from 'react-icons/lia';\n\nconst Link = (props) => {\n    const { setLinkDocument } = props;\n    const [isLoding, setIsLoding] = useState(false)\n    const [data, setData] = useState([])\n    const [contactModelOpen, setContactModel] = useState(false);\n    const [leadModelOpen, setLeadModel] = useState(false);\n    const user = JSON.parse(localStorage.getItem('user'))\n\n    const initialValues = {\n        linkWith: '',\n        linkContact: '',\n        linkLead: '',\n    }\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        onSubmit: (values, { resetForm }) => {\n            handleClick();\n            resetForm();\n        },\n    });\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\n\n    const handleClick = async () => {\n        try {\n            setIsLoding(true)\n            let data = values.linkContact ? { linkContact: values.linkContact } : { linkLead: values.linkLead }\n            let response = await postApi(`api/document/link-document/${props.id}`, data)\n            if (response && response.status === 200) {\n                setLinkDocument((pre) => !pre)\n                props.onClose();\n            } else {\n                toast.error(response.response.data?.message)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n        finally {\n            setIsLoding(false)\n        }\n    }\n\n    const handleClose = () => {\n        props.onClose(false)\n    }\n\n    const fetchData = async () => {\n        if (values.linkWith === 'Contact') {\n            let result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`);\n            values.createBy = result?._id;\n            setData(prevData => [\n                // ...prevData,\n                ...(result?.data?.map(item => ({ label: item.firstName + ' ' + item.lastName, value: item._id })) || [])\n            ]);\n        } else if (values.linkWith === 'lead') {\n            let result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);\n            values.createBy = result?._id;\n            setData(prevData => [\n                // ...prevData,\n                ...(result?.data?.map(item => ({ label: item.leadName, value: item._id })) || [])\n            ]);\n        }\n    }\n\n    useEffect(() => {\n        fetchData()\n    }, [values.linkWith]);\n\n    return (\n        <>\n\n            <Modal onClose={props.onClose} isOpen={props.isOpen} >\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>Link With Document</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n\n                        <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n\n                            <GridItem colSpan={{ base: 12 }}>\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Link With\n                                </FormLabel>\n                                <RadioGroup onChange={(e) => { resetForm(); setFieldValue('linkWith', e) }} value={values.linkWith}>\n                                    <Stack direction='row'>\n                                        <Radio value='Contact'>Contact</Radio>\n                                        <Radio value='lead'>Lead</Radio>\n                                    </Stack>\n                                </RadioGroup>\n                                <Text mb='10px' color={'red'}> {errors.linkWith && touched.linkWith && errors.linkWith}</Text>\n                            </GridItem>\n\n                            {values.linkWith === 'Contact' ?\n                                <GridItem colSpan={{ base: 12 }}>\n                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                        Link Contact\n                                    </FormLabel>\n                                   \n                                    <Flex>\n\n                                        <Select\n                                            value={values.linkContact}\n                                            name=\"linkContact\"\n                                            onChange={handleChange}\n                                            mb={errors.linkContact && touched.linkContact ? undefined : '10px'}\n                                            fontWeight='500'\n                                            placeholder='Link Contact'\n                                            borderColor={errors.linkContact && touched.linkContact ? \"red.300\" : null}\n                                        >\n                                            {data?.map((item) => {\n                                                return <option value={item.value} key={item.value}>{values.linkWith === 'Contact' && `${item.label}`}</option>\n                                            })}\n                                        </Select>\n                                        <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\n                                        <Text mb='10px' color={'red'}> {errors.linkContact && touched.linkContact && errors.linkContact}</Text>\n                                    </Flex>\n                                </GridItem>\n                                : values.linkWith === 'lead' &&\n                                <GridItem colSpan={{ base: 12 }}>\n                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                        Link Lead\n                                    </FormLabel>\n                                    \n                                    <Flex>\n\n                                        <Select\n                                            value={values.linkLead}\n                                            name=\"linkLead\"\n                                            onChange={handleChange}\n                                            mb={errors.linkLead && touched.linkLead ? undefined : '10px'}\n                                            fontWeight='500'\n                                            placeholder='Link Lead'\n                                            borderColor={errors.linkLead && touched.linkLead ? \"red.300\" : null}\n                                        >\n                                            {data?.map((item) => {\n                                                return <option value={item.value} key={item.value}>{values.linkWith === 'lead' && `${item.label}`}</option>\n                                            })}\n                                        </Select>\n                                        <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\n                                        <Text mb='10px' color={'red'}> {errors.linkLead && touched.linkLead && errors.linkLead}</Text>\n                                    </Flex>\n                                    <Text mb='10px' color={'red'}> {errors.linkLead && touched.linkLead && errors.linkLead}</Text>\n                                </GridItem>\n\n                            }\n\n                        </Grid>\n\n\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button size=\"sm\" colorScheme='brand' rightIcon={<LinkIcon />} mr={2} onClick={handleClick}>Link</Button>\n                        <Button size=\"sm\" variant=\"outline\" colorScheme='red' onClick={() => { handleClose(); resetForm() }}>Cancel</Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal >\n            <ContactModel data={data} isOpen={contactModelOpen} onClose={setContactModel} fieldName='linkContact' setFieldValue={setFieldValue} />\n            {/* Lead Model  */}\n            <LeadModel data={data} isOpen={leadModelOpen} onClose={setLeadModel} fieldName='linkLead' setFieldValue={setFieldValue} />\n        </>\n    )\n}\n\nexport default Link\n","import { DeleteIcon, DownloadIcon, LinkIcon, ViewIcon } from '@chakra-ui/icons';\nimport { Collapse, Flex, Icon, IconButton, List, ListIcon, ListItem, Menu, MenuButton, MenuItem, MenuList, Text } from '@chakra-ui/react';\nimport React, { useState } from 'react'\nimport { FcOpenedFolder } from 'react-icons/fc';\nimport { FiChevronDown, FiChevronRight, FiFile } from 'react-icons/fi';\nimport { IoIosContact } from 'react-icons/io';\nimport { MdLeaderboard } from 'react-icons/md';\nimport { useNavigate } from 'react-router-dom';\nimport Delete from 'views/admin/document/component/Delete';\nimport LinkModel from 'views/admin/document/component/LinkModel';\nimport { CiMenuKebab } from \"react-icons/ci\";\n\nconst FolderTreeView = ({ data, deleteFile, item, download, name, isFile, children, setLinkDocument, from }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    // const user = localStorage.getItem('user');\n    const [deleteModel, setDelete] = useState(false);\n    const [linkModel, setLinkModel] = useState(false);\n    const [id, setId] = useState(false);\n    const navigate = useNavigate()\n\n    const handleToggle = () => {\n        setIsOpen(!isOpen);\n    };\n    const isFolder = !isFile && !!children;\n\n    const handleClick = (data) => {\n        download(data)\n    }\n\n    const deletedata = (data) => {\n        setDelete(true)\n        setId(data)\n    }\n\n    const handleLinkClick = (data) => {\n        setLinkModel(true)\n        setId(data)\n    }\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n\n    function isImageUrl(url) {\n        const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp'];\n        const urlExtension = url.substring(url.lastIndexOf('.')).toLowerCase();\n        return imageExtensions.includes(urlExtension);\n    }\n    return (\n        <List width={'100%'} >\n            <ListItem alignItems={'center'} display={'flex'} >\n                <Text alignItems={'center'} justifyContent={'space-between'} display={'flex'} width={'100%'} onClick={isFolder ? handleToggle : undefined} _hover={{ cursor: 'pointer', textDecoration: 'none' }}>\n                    <Flex width={'70%'} alignItems={'center'}>\n                        <ListIcon as={isFile ? FiFile : FcOpenedFolder} />\n                        {isFolder && (isOpen ? <FiChevronDown /> : <FiChevronRight />)}\n                        {name}\n                    </Flex>\n                    {item?.createByName ? <Text>({item?.createByName}) </Text> : null}\n                    {!isFolder &&\n                        <Flex justifyContent={'right'} width={'100%'}  >\n                            <Menu isLazy  >\n                                <MenuButton><CiMenuKebab /></MenuButton>\n                                <MenuList position={'absolute'} right={-5} pl={'0.5em'} minW={'fit-content'} >\n                                    {!from && data?.linkContact ?\n                                        <MenuItem pr={2} w={'180px'} onClick={() => navigate(`/contactView/${data?.linkContact}`)} icon={<IoIosContact fontSize={15} />}>Linked Contact</MenuItem>\n                                        : !from && data?.linkLead && <MenuItem pr={2} w={'180px'} onClick={() => navigate(`/leadView/${data?.linkLead}`)} icon={<MdLeaderboard fontSize={15} />}>Linked Lead</MenuItem>\n                                    }\n                                    {!from && <MenuItem pr={10} alignItems={'start'} color={'blue'} onClick={() => handleLinkClick(data?._id)} icon={<LinkIcon fontSize={15} />}>Link</MenuItem>}\n                                    {isImageUrl(data?.img) && <MenuItem alignItems={'start'} pr={10} color={'green'} onClick={() => window.open(data?.img)} icon={<ViewIcon fontSize={15} />}>View</MenuItem>}\n                                    <MenuItem pr={10} alignItems={'start'} onClick={() => handleClick(data?._id)} icon={<DownloadIcon fontSize={15} />}>Download</MenuItem>\n                                    {!from && <MenuItem alignItems={'start'} pr={10} color={'red'} onClick={() => deletedata(data?._id)} icon={<DeleteIcon fontSize={15} />}>Delete</MenuItem>}\n                                </MenuList>\n                            </Menu>\n                        </Flex>\n                    }\n                    <Delete isOpen={deleteModel} onClose={setDelete} method='one' deleteFile={deleteFile} id={id} />\n                    <LinkModel isOpen={linkModel} setLinkDocument={setLinkDocument} onClose={setLinkModel} id={id} />\n                </Text>\n            </ListItem>\n            {\n                isFolder && (\n                    <Collapse in={isOpen} animateOpacity>\n                        <List styleType=\"disc\" ml={4}>\n                            {children}\n                        </List>\n                    </Collapse>\n                )\n            }\n        </List>\n    );\n};\n\n\nexport default FolderTreeView\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport ContactTable from './Contact.js'\nimport Spinner from 'components/spinner/Spinner'\nimport { GiClick } from \"react-icons/gi\";\n\nconst MultiContactModel = (props) => {\n    const { onClose, isOpen, fieldName, setFieldValue,data } = props\n    const [selectedValues, setSelectedValues] = useState([]);\n    const [isLoding, setIsLoding] = useState(false)\n\n    const columns = [\n        { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\n        { Header: 'title', accessor: 'title' },\n        { Header: \"first Name\", accessor: \"firstName\" },\n        { Header: \"last Name\", accessor: \"lastName\" },\n        { Header: \"phone Number\", accessor: \"phoneNumber\" },\n        { Header: \"Email Address\", accessor: \"email\" },\n        { Header: \"physical Address\", accessor: \"physicalAddress\" },\n        { Header: \"mailing Address\", accessor: \"mailingAddress\" },\n        { Header: \"Contact Method\", accessor: \"preferredContactMethod\" },\n    ];\n\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n   \n    const uniqueValues = [...new Set(selectedValues)];\n\n    const handleSubmit = async () => {\n        try {\n            setIsLoding(true)\n            setFieldValue(fieldName, uniqueValues)\n            onClose()\n        }\n        catch (e) {\n            console.log(e)\n        }\n        finally {\n            setIsLoding(false)\n        }\n    }\n\n  \n    return (\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Select Contact</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    {isLoding ?\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\n                            <Spinner />\n                        </Flex> : <ContactTable tableData={data} type='multi' selectedValues={selectedValues} setSelectedValues={setSelectedValues} columnsData={columns} title=\"Contact\" />}\n                </ModalBody>\n                <ModalFooter>\n                    <Button variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>\n                    <Button onClick={() => onClose()}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n\n    )\n}\n\nexport default MultiContactModel\n","import {\n  Box, Checkbox,\n  Flex, Table,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n  useColorModeValue\n} from \"@chakra-ui/react\";\nimport { useMemo } from \"react\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\n\n// Custom components\nimport Card from \"components/card/Card\";\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Pagination from \"components/pagination/Pagination\";\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\n\nexport default function LeadTable(props) {\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\n\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const data = useMemo(() => tableData, [tableData]);\n  const user = JSON.parse(localStorage.getItem(\"user\"))\n  const [gopageValue, setGopageValue] = useState()\n\n  const tableInstance = useTable(\n    {\n      columns, data,\n      initialState: { pageIndex: 0 }\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize }\n  } = tableInstance;\n\n  if (pageOptions.length < gopageValue) {\n    setGopageValue(pageOptions.length)\n  }\n\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n\n  const handleCheckboxChange = (event, value) => {\n    if (type === \"multi\") {\n      if (event.target.checked) {\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\n      } else {\n        setSelectedValues((prevSelectedValues) =>\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\n        );\n      }\n    } else {\n      if (event.target.checked) {\n        setSelectedValues(value);\n      } else {\n        setSelectedValues(null);\n      }\n    }\n\n  };\n\n\n  return (\n    <Card\n      direction='column'\n      w='100%'\n      px='0px'\n      style={{ border: '1px solid gray.200' }}\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\n        <Text\n          color={textColor}\n          fontSize='22px'\n          fontWeight='700'\n          lineHeight='100%'>\n          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)\n        </Text>\n      </Flex>\n      <Box overflowY={'auto'} className=\"table-container-property\" >\n        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\n          <Thead zIndex={1}>\n            {headerGroups?.map((headerGroup, index) => (\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\n                {headerGroup.headers.map((column, index) => (\n                  <Th\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\n                    pe=\"10px\"\n                    key={index}\n                    borderColor={borderColor}\n                  >\n                    <Flex\n                      align=\"center\"\n                      justifyContent={column.center ? \"center\" : \"start\"}\n                      fontSize={{ sm: \"14px\", lg: \"16px\" }}\n                      color=\" secondaryGray.900\"\n                    >\n                      <span style={{ textTransform: \"capitalize\", marginRight: \"8px\" }}>\n                        {column.render(\"Header\")}\n                      </span>\n\n                      {column.isSortable !== false && (\n                        <span>\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\n                        </span>\n                      )}\n                    </Flex>\n                  </Th>\n                ))}\n              </Tr>\n            ))}\n          </Thead>\n          <Tbody  {...getTableBodyProps()}>\n            {data?.length === 0 && (\n              <Tr>\n                <Td colSpan={columns.length}>\n                  <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                    -- No Data Found --\n                  </Text>\n                </Td>\n              </Tr>\n            )}\n            {page?.map((row, index) => {\n              prepareRow(row);\n              return (\n                <Tr {...row?.getRowProps()} key={index}>\n                  {row?.cells?.map((cell, index) => {\n                    let data = \"\";\n                    if (cell?.column.Header === \"#\") {\n                      data = (\n                        <Flex align=\"center\">\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                            {cell?.row?.index + 1}\n                          </Text>\n                        </Flex>\n                      );\n                    } else if (cell?.column.Header === \"Lead Name\") {\n                      data = (\n                        // <Link to={user?.role !== 'superAdmin' ? `/leadView/${cell?.row?.values._id}` : `/admin/leadView/${cell?.row?.values._id}`}>\n                        <Text\n                          me=\"10px\"\n                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\n                          color={textColor}\n                          fontSize=\"sm\"\n                          fontWeight=\"700\"\n                        >\n                          {cell?.value}\n                        </Text>\n                        // </Link>\n                      );\n                    } else if (cell?.column.Header === \"Lead Email\") {\n                      data = (\n                        <Text\n                          me=\"10px\"\n                          color={textColor}\n                          fontSize=\"sm\"\n                          fontWeight=\"700\"\n                        >\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"Lead PhoneNumber\") {\n                      data = (\n                        <Text\n                          me=\"10px\"\n                          color={textColor}\n                          fontSize=\"sm\"\n                          fontWeight=\"700\"\n                        >\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"Lead Address\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"Lead Status\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"Lead Owner\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"Lead Score\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    }\n                    return (\n                      <Td\n                        {...cell?.getCellProps()}\n                        key={index}\n                        fontSize={{ sm: \"14px\" }}\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                        borderColor='transparent'>\n                        {data}\n                      </Td>\n                    );\n                  })}\n                </Tr>\n              );\n            })}\n          </Tbody>\n        </Table>\n      </Box>\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\n\n    </Card>\n  );\n}\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport LeadTable from './Lead'\nimport Spinner from 'components/spinner/Spinner'\nimport { GiClick } from \"react-icons/gi\";\n\nconst MultiLeadModel = (props) => {\n    const { onClose, isOpen, fieldName, setFieldValue,data } = props\n    const [selectedValues, setSelectedValues] = useState([]);\n    const [isLoding, setIsLoding] = useState(false)\n\n    const columns = [\n        { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\n        { Header: 'Lead Name', accessor: 'leadName', width: 20 },\n        { Header: \"Lead Email\", accessor: \"leadEmail\", },\n        { Header: \"Lead PhoneNumber\", accessor: \"leadPhoneNumber\", },\n        { Header: \"Lead Address\", accessor: \"leadAddress\", },\n        { Header: \"Lead Status\", accessor: \"leadStatus\", },\n        { Header: \"Lead Owner\", accessor: \"leadOwner\", },\n        { Header: \"Lead Score\", accessor: \"leadScore\", },\n    ];\n\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n   \n    const uniqueValues = [...new Set(selectedValues)];\n\n    const handleSubmit = async () => {\n        try {\n            setIsLoding(true)\n            setFieldValue(fieldName, uniqueValues)\n            onClose()\n        }\n        catch (e) {\n            console.log(e)\n        }\n        finally {\n            setIsLoding(false)\n        }\n    }\n\n    return (\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Select Lead</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    {isLoding ?\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\n                            <Spinner />\n                        </Flex> : <LeadTable tableData={data} type='multi' selectedValues={selectedValues} setSelectedValues={setSelectedValues} columnsData={columns} title=\"Lead\" />}\n                </ModalBody>\n                <ModalFooter>\n                    <Button variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>\n                    <Button onClick={() => onClose()}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n\n    )\n}\n\nexport default MultiLeadModel\n","import { Button, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Stack, Text, Textarea } from '@chakra-ui/react';\nimport { CUIAutoComplete } from 'chakra-ui-autocomplete';\nimport MultiContactModel from 'components/commonTableModel/MultiContactModel';\nimport MultiLeadModel from 'components/commonTableModel/MultiLeadModel';\nimport Spinner from 'components/spinner/Spinner';\nimport dayjs from 'dayjs';\nimport { useFormik } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { LiaMousePointerSolid } from 'react-icons/lia';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { MeetingSchema } from 'schema';\nimport { getApi, postApi } from 'services/api';\n\nconst AddMeeting = (props) => {\n    const { onClose, isOpen, setAction, from, fetchData, view } = props\n    const [leaddata, setLeadData] = useState([])\n    const [contactdata, setContactData] = useState([])\n    const [isLoding, setIsLoding] = useState(false)\n    const [contactModelOpen, setContactModel] = useState(false);\n    const [leadModelOpen, setLeadModel] = useState(false);\n    const todayTime = new Date().toISOString().split('.')[0];\n    const leadData = useSelector((state) => state?.leadData?.data);\n\n\n    const user = JSON.parse(localStorage.getItem('user'))\n\n    const contactList = useSelector((state) => state?.contactData?.data)\n\n\n    const initialValues = {\n        agenda: '',\n        attendes: props.leadContect === 'contactView' && props.id ? [props.id] : [],\n        attendesLead: props.leadContect === 'leadView' && props.id ? [props.id] : [],\n        location: '',\n        related: props.leadContect === 'contactView' ? 'Contact' : props.leadContect === 'leadView' ? 'Lead' : 'None',\n        dateTime: '',\n        notes: '',\n        createBy: user?._id,\n    }\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: MeetingSchema,\n        onSubmit: (values, { resetForm }) => {\n            \n        },\n    });\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik\n\n    const AddData = async () => {\n\n    };\n\n    const fetchAllData = async () => {\n        \n    }\n\n    useEffect(() => {\n\n    }, [props.id, values.related])\n\n    const extractLabels = (selectedItems) => {\n        return selectedItems.map((item) => item._id);\n    };\n\n    const countriesWithEmailAsLabel = (values.related === \"Contact\" ? contactdata : leaddata)?.map((item) => ({\n        ...item,\n        value: item._id,\n        label: values.related === \"Contact\" ? `${item.firstName} ${item.lastName}` : item.leadName,\n    }));\n\n    return (\n        <Modal onClose={onClose} isOpen={isOpen} isCentered>\n            <ModalOverlay />\n            <ModalContent height={\"580px\"}>\n                <ModalHeader>Add Meeting </ModalHeader>\n                <ModalCloseButton />\n                <ModalBody overflowY={\"auto\"} height={\"400px\"}>\n                    {/* Contact Model  */}\n                    <MultiContactModel data={contactdata} isOpen={contactModelOpen} onClose={setContactModel} fieldName='attendes' setFieldValue={setFieldValue} />\n                    {/* Lead Model  */}\n                    <MultiLeadModel data={leaddata} isOpen={leadModelOpen} onClose={setLeadModel} fieldName='attendesLead' setFieldValue={setFieldValue} />\n\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Agenda<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.agenda}\n                                name=\"agenda\"\n                                placeholder='Agenda'\n                                fontWeight='500'\n                                borderColor={errors.agenda && touched.agenda ? \"red.300\" : null}\n                            />\n                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.agenda && touched.agenda && errors.agenda}</Text>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }} >\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Related To<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <RadioGroup onChange={(e) => setFieldValue('related', e)} value={values.related}>\n                                <Stack direction='row'>\n                                    {props.leadContect === 'contactView' && <Radio value='Contact'>Contact</Radio>}\n                                    {props.leadContect === 'leadView' && <Radio value='Lead'>Lead</Radio>}\n                                    {!props.leadContect && <> <Radio value='Contact'>Contact</Radio><Radio value='Lead'>Lead</Radio></>}\n                                </Stack>\n                            </RadioGroup>\n                            <Text mb='10px' color={'red'} fontSize='sm'> {errors.related && touched.related && errors.related}</Text>\n                        </GridItem>\n                        {(values.related === \"Contact\" ? (contactdata?.length ?? 0) > 0 : (leaddata?.length ?? 0) > 0) && values.related &&\n\n                            <GridItem colSpan={{ base: 12 }}>\n                                <Flex alignItems={'end'} justifyContent={'space-between'} >\n                                    <Text w={'100%'} >\n                                        <CUIAutoComplete\n                                            label={`Choose Preferred Attendes ${values.related === \"Contact\" ? \"Contact\" : values.related === \"Lead\" && \"Lead\"}`}\n                                            placeholder=\"Type a Name\"\n                                            name=\"attendes\"\n                                            items={countriesWithEmailAsLabel}\n                                            className='custom-autoComplete'\n                                            selectedItems={countriesWithEmailAsLabel?.filter((item) => values.related === \"Contact\" ? values?.attendes.includes(item._id) : values.related === \"Lead\" && values?.attendesLead.includes(item._id))}\n                                            onSelectedItemsChange={(changes) => {\n                                                const selectedLabels = extractLabels(changes.selectedItems);\n                                                values.related === \"Contact\" ? setFieldValue('attendes', selectedLabels) : values.related === \"Lead\" && setFieldValue('attendesLead', selectedLabels)\n                                            }}\n                                        />\n                                    </Text>\n                                    <IconButton mb={6} onClick={() => values.related === \"Contact\" ? setContactModel(true) : values.related === \"Lead\" && setLeadModel(true)} fontSize='25px' icon={<LiaMousePointerSolid />} />\n                                </Flex>\n                                <Text color={'red'}> {errors.attendes && touched.attendes && errors.attendes}</Text>\n                            </GridItem>\n                        }\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Location\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.location}\n                                name=\"location\"\n                                placeholder='Location'\n                                fontWeight='500'\n                                borderColor={errors.location && touched.location ? \"red.300\" : null}\n                            />\n                            <Text mb='10px' color={'red'} fontSize='sm'> {errors.location && touched.location && errors.location}</Text>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Date Time<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                type='datetime-local'\n                                onChange={handleChange} onBlur={handleBlur}\n                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}\n                                value={values.dateTime}\n                                name=\"dateTime\"\n                                placeholder='Date Time'\n                                fontWeight='500'\n                                borderColor={errors.dateTime && touched.dateTime ? \"red.300\" : null}\n                            />\n                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.dateTime && touched.dateTime && errors.dateTime}</Text>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Notes\n                            </FormLabel>\n                            <Textarea\n                                resize={'none'}\n                                fontSize='sm'\n                                placeholder='Notes'\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.notes}\n                                name=\"notes\"\n                                fontWeight='500'\n                                borderColor={errors.notes && touched.notes ? \"red.300\" : null}\n                            />\n                            <Text mb='10px' color={'red'}> {errors.notes && touched.notes && errors.notes}</Text>\n                        </GridItem>\n\n                    </Grid>\n\n\n                </ModalBody>\n                <ModalFooter>\n                    <Button size=\"sm\" variant='brand' me={2} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>\n                    <Button sx={{\n                        textTransform: \"capitalize\",\n                    }} variant=\"outline\"\n                        colorScheme=\"red\" size=\"sm\" onClick={() => {\n                            formik.resetForm()\n                            onClose()\n                        }}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default AddMeeting\n\n","import { useEffect } from 'react';\n\nconst FormDataUse = (values, formData) => {\n\n    useEffect(() => {\n        // const appendFormData = (key) => {\n        //     if (formData && values[key]) {\n        //         formData.append(key, values[key]);\n        //     }\n        // };\n\n        // // Append each value to formData\n        // appendFormData('folderName');\n        // appendFormData('createBy');\n        // appendFormData('filename');\n\n        Object.entries(values).forEach(([key, value]) => {\n            formData.append(key, value);\n        });\n\n        // Clean up function\n        return () => {\n            // Optionally, you can reset or clear the formData here if needed\n        };\n    }, [values, formData]);\n};\n\nexport default FormDataUse;\n\n\nexport const commonUtils = {\n    formData: (values) => {\n        const formData = new FormData();\n\n        Object.entries(values).forEach(([key, value]) => {\n            formData.append(key, value);\n        });\n        values.files.forEach((file) => {\n            formData?.append('files', file);\n        });\n        return formData;\n    }\n}","import { Box, Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, FormLabel, Input, Text } from '@chakra-ui/react';\nimport React, { useState } from 'react'\nimport { useFormik } from 'formik';\nimport Spinner from 'components/spinner/Spinner';\nimport { postApi } from 'services/api';\nimport { documentSchema } from 'schema';\nimport FormDataUse, { commonUtils } from './formDataUse';\nimport Upload from '../views/admin/document/component/Upload'\n\nconst AddDocumentModal = ({ setAddDocument, addDocument, linkId, from, setAction, fetchData }) => {\n    const [isLoding, setIsLoding] = useState(false)\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n\n    const initialValues = {\n        folderName: '',\n        files: '',\n        filename: '',\n        linkLead: from === 'lead' && linkId,\n        linkContact: from === 'contact' && linkId,\n        createBy: user._id\n    };\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: documentSchema,\n        onSubmit: (values, { resetForm }) => {\n            addData();\n        },\n    });\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\n\n\n    const addData = async () => {\n        try {\n            setIsLoding(true)\n            const payload = commonUtils.formData(values)\n\n            let response = await postApi(from === 'lead' ? 'api/document/addDocumentLead' : 'api/document/addDocumentContact', payload);\n            if (response && response.status === 200) {\n                formik.resetForm();\n                // setAction((pre) => !pre)\n                fetchData(2)\n                setAddDocument(false)\n            }\n        } catch (e) {\n            console.log(e);\n        }\n        finally {\n            setIsLoding(false)\n        }\n    };\n    return (\n        <Modal onClose={() => setAddDocument(false)} isOpen={addDocument} isCentered>\n            <ModalOverlay />\n            <ModalContent maxWidth={\"2xl\"}>\n                <ModalHeader></ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    <Box >\n                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                            Folder Name<Text color={\"red\"}>*</Text>\n                        </FormLabel>\n                        <Input\n                            fontSize='sm'\n                            onChange={handleChange}\n                            value={values.folderName}\n                            name=\"folderName\"\n                            placeholder='Enter Folder Name'\n                            fontWeight='500'\n                            borderColor={errors?.folderName && touched?.folderName ? \"red.300\" : null}\n                        />\n                        <Text mb='10px' color={'red'}> {errors.folderName && touched.folderName && errors.folderName}</Text>\n                    </Box>\n                    <Box >\n                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                            File Name\n                        </FormLabel>\n                        <Input\n                            fontSize='sm'\n                            onChange={handleChange}\n                            value={values.filename}\n                            name=\"filename\"\n                            placeholder='Enter File Name'\n                            fontWeight='500'\n                            borderColor={errors?.filename && touched?.filename ? \"red.300\" : null}\n                        />\n                        <Text mb='10px' color={'red'}> {errors.filename && touched.filename && errors.filename}</Text>\n                    </Box>\n                    <Upload count={values.files.length} onFileSelect={(file) => setFieldValue('files', file)} />              </ModalBody>\n                <ModalFooter>\n                    <Button size=\"sm\" variant='brand' mr={2} onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>\n                    <Button size=\"sm\" variant=\"outline\" colorScheme=\"red\" onClick={() => { setAddDocument(false); resetForm() }} >Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default AddDocumentModal\n"],"names":["props","onClose","isOpen","fetchData","setAction","user","JSON","parse","localStorage","getItem","isLoding","setIsLoding","useState","todayTime","Date","toISOString","split","data","setData","dispatch","useDispatch","initialValues","sender","_id","recipient","lead","contactEmail","leadEmail","subject","message","createByContact","id","createByLead","startDate","type","html","createBy","formik","useFormik","validationSchema","emailSchema","enableReinitialize","onSubmit","values","_ref","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","postApi","status","e","console","log","useEffect","result","fetchEmailTempData","_result$payload","payload","toast","error","fetchEmailTemp","_jsxs","Modal","isCentered","children","_jsx","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Grid","templateColumns","gap","GridItem","colSpan","base","FormLabel","display","ms","fontSize","fontWeight","mb","Text","color","Input","onChange","onBlur","value","name","disabled","placeholder","borderColor","min","dayjs","format","RadioGroup","Stack","direction","Radio","_Fragment","Textarea","resize","Select","map","item","templateName","ModalFooter","Button","size","variant","onClick","Spinner","sx","marginLeft","textTransform","colorScheme","Upload","used","total","count","textColorPrimary","_objectWithoutProperties","_excluded","useColorModeValue","brandColor","Dropzone","w","me","minH","height","onFileSelect","content","Box","Icon","as","MdUpload","h","Flex","justify","mx","textAlign","mt","my","cData","LData","callDuration","callNotes","phoneCallSchema","leadPhoneNumber","phoneNumber","fetchDataR","md","method","mr","deleteFile","deleteManyApi","url","setSelectedValues","handleClose","setLinkDocument","contactModelOpen","setContactModel","leadModelOpen","setLeadModel","linkWith","linkContact","linkLead","handleClick","response","concat","_response$response$da","pre","getApi","role","prevData","_result$data","label","firstName","lastName","_result$data2","leadName","undefined","IconButton","ml","icon","LiaMousePointerSolid","rightIcon","LinkIcon","ContactModel","fieldName","LeadModel","download","isFile","from","setIsOpen","deleteModel","setDelete","linkModel","setLinkModel","setId","navigate","useNavigate","isFolder","List","width","ListItem","alignItems","justifyContent","handleToggle","_hover","cursor","textDecoration","ListIcon","FiFile","FcOpenedFolder","FiChevronDown","FiChevronRight","createByName","Menu","isLazy","MenuButton","CiMenuKebab","MenuList","position","right","pl","minW","MenuItem","pr","IoIosContact","MdLeaderboard","handleLinkClick","urlExtension","substring","lastIndexOf","toLowerCase","includes","isImageUrl","img","window","open","ViewIcon","DownloadIcon","deletedata","DeleteIcon","Delete","LinkModel","Collapse","in","animateOpacity","styleType","selectedValues","uniqueValues","Set","ContactTable","tableData","columnsData","Header","accessor","isSortable","title","leftIcon","GiClick","LeadTable","columns","useMemo","gopageValue","setGopageValue","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","length","textColor","handleCheckboxChange","event","target","checked","prevSelectedValues","filter","selectedValue","Card","px","style","border","overflowX","sm","lg","align","lineHeight","CountUpComponent","targetNumber","overflowY","className","Table","_objectSpread","Thead","zIndex","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","getSortByToggleProps","pe","center","marginRight","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","row","_row$cells","getRowProps","cells","cell","_cell$row","Checkbox","isChecked","getCellProps","Pagination","_ref2","_contactdata$length","_leaddata$length","view","leaddata","setLeadData","contactdata","setContactData","useSelector","_state$leadData","leadData","_state$contactData","contactData","agenda","attendes","leadContect","attendesLead","location","related","dateTime","notes","MeetingSchema","countriesWithEmailAsLabel","MultiContactModel","MultiLeadModel","CUIAutoComplete","items","selectedItems","onSelectedItemsChange","changes","selectedLabels","commonUtils","formData","FormData","Object","entries","forEach","append","files","file","setAddDocument","addDocument","linkId","folderName","filename","documentSchema","addData","maxWidth"],"sourceRoot":""}