{"version":3,"file":"static/js/7083.e8464507.chunk.js","mappings":"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","sources":["views/admin/role/changeAccess.js","views/admin/role/components/roleUser.js","views/admin/role/components/userModal.js","views/admin/role/components/roleModal.js","views/admin/role/Add.js","views/admin/role/index.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Flex,\n  Text,\n  Td,\n  Checkbox,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport { useFormik } from \"formik\";\nimport { putApi } from \"services/api\";\nimport DataNotFound from \"components/notFoundData\";\n\nfunction ChangeAccess(props) {\n  const {\n    columnsData,\n    name,\n    tableData,\n    fetchData,\n    setAccess,\n    _id,\n    setRoleModal,\n    editModal, setEditModal,\n  } = props;\n\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const [isLoding, setIsLoding] = useState(false);\n\n  const [gopageValue, setGopageValue] = useState();\n  const data = useMemo(() => tableData || [], [tableData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  );\n\n  const {\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageOptions,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  if (pageOptions.length < gopageValue) {\n    setGopageValue(pageOptions.length);\n  }\n\n  const initialValues = {\n    roleName: name,\n    access: tableData,\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    enableReinitialize: true,\n    onSubmit: (values, { resetForm }) => {\n      EditData();\n    },\n  });\n\n  const {\n    values,\n    handleSubmit,\n    setFieldValue,\n    resetForm\n  } = formik;\n\n  // const handleCheckboxChange = (index, fieldName, secondFieldName) => (event) => {\n  //   const { checked } = event.target;\n\n  //   let updatedAccess = values.access.map((item, idx) => {\n  //     if (idx === index) {\n  //       const updatedItem = { ...item, [fieldName]: checked };\n  //       if (secondFieldName && checked === false) {\n  //         updatedItem[secondFieldName] = checked;\n  //         updatedItem.update = checked;\n  //         updatedItem.delete = checked;\n  //       } else if (secondFieldName) {\n  //         updatedItem[secondFieldName] = checked;\n  //       }\n\n  //       return updatedItem;\n  //     }\n  //     return item;\n  //   });\n  //   const leadsIndex = values.access.findIndex(accessItem => accessItem.title === \"Leads\");\n  //   const contactsIndex = values.access.findIndex(accessItem => accessItem.title === \"Contacts\");\n\n  //   const lc = ((updatedAccess[index]?.title === \"Leads\" || updatedAccess[index]?.title === \"Contacts\") && (!updatedAccess[contactsIndex]?.view && !updatedAccess[leadsIndex]?.view))\n\n  //   const mm = updatedAccess?.map((i, idx) => {\n  //     let newItem = { ...i };\n  //     if (secondFieldName && checked === false && lc) {\n  //       if (i.title === \"Emails\" || i.title === \"Calls\" || i.title === \"Meetings\") {\n  //         newItem.create = false;\n  //         newItem.delete = false;\n  //         newItem.update = false;\n  //         newItem.view = false;\n  //       }\n  //     }\n  //     return newItem;\n  //   })\n\n  //   // setFieldValue('access', updatedAccess);\n  //   setFieldValue('access', mm);\n  // };\n\n  const handleCheckboxChange = (index, fieldName, secondFieldName) => (event) => {\n    const { checked } = event.target;\n    const leadsIndex = values.access.findIndex(accessItem => accessItem.title === \"Leads\");\n    const contactsIndex = values.access.findIndex(accessItem => accessItem.title === \"Contacts\");\n\n    const updatedAccess = values.access.map((item, idx) => {\n      if (idx === index) {\n        const updatedItem = { ...item, [fieldName]: checked };\n        if (secondFieldName && !checked) {\n          updatedItem[secondFieldName] = updatedItem.update = updatedItem.delete = checked;\n        } else if (secondFieldName) {\n          updatedItem[secondFieldName] = checked;\n        }\n        return updatedItem;\n      }\n      return item;\n    });\n\n    const finalUpdatedAccessWith = updatedAccess.map((item, idx) => {\n      if (secondFieldName && checked === false && (!updatedAccess[contactsIndex]?.view && !updatedAccess[leadsIndex]?.view)) {\n        if ([\"Emails\", \"Calls\", \"Meetings\"].includes(item.title)) {\n          return {\n            ...item,\n            create: false,\n            delete: false,\n            update: false,\n            view: false\n          };\n        }\n      }\n      return item;\n    });\n\n    setFieldValue('access', finalUpdatedAccessWith);\n  };\n\n  const EditData = async () => {\n    try {\n      setIsLoding(true);\n      setAccess(values?.access)\n      let response = await putApi(`api/role-access/edit/${_id}`, values);\n      if (response.status === 200) {\n        setEditModal(false)\n        fetchData()\n        setRoleModal(true)\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setIsLoding(false);\n    }\n  };\n\n  const disable = (cell) => {\n    if ([\"Emails\", \"Calls\", \"Meetings\"].includes(cell.title)) {\n      return !values?.access?.some((i => (i.title === \"Contacts\" || i.title === \"Leads\") && i.view));\n    }\n    return false;\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [editModal])\n\n  useEffect(() => {\n    if (Array.isArray(data) && data?.length > 0) {\n      setPageSize(data?.length); // Ensure the pageSize is set to the length of the data\n    }\n  }, [data, setPageSize]);\n\n  return (\n    <Modal onClose={() => setEditModal(false)} isOpen={editModal} isCentered size={\"xl\"}>\n      <ModalOverlay />\n      <ModalContent height={\"580px\"} maxWidth={\"2xl\"}>\n        <ModalHeader textTransform={\"capitalize\"}>{name} Access</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody overflow={\"auto\"} height={\"400px\"}>\n          <Table>\n            <Thead>\n              {headerGroups?.map((headerGroup, index) => (\n                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\n                  {headerGroup.headers?.map((column, index) => (\n                    <Th\n                      sx={{ width: \"10px\" }}\n                      pe=\"10px\"\n                      key={index}\n                      borderColor={borderColor}\n                      display={column.display === false && \"none\"}\n                    >\n                      <Flex\n                        justify=\"space-between\"\n                        align=\"center\"\n                        fontSize={{ sm: \"10px\", lg: \"12px\" }}\n                        color=\"gray.400\"\n                      >\n                        {column.display !== false && column.render(\"Header\")}\n                      </Flex>\n                    </Th>\n                  ))}\n                </Tr>\n              ))}\n            </Thead>\n            <Tbody {...getTableBodyProps()}>\n              {isLoding ? (\n                <Tr>\n                  <Td colSpan={columns?.length}>\n                    <Flex\n                      justifyContent={\"center\"}\n                      alignItems={\"center\"}\n                      width=\"100%\"\n                      color={textColor}\n                      fontSize=\"sm\"\n                      fontWeight=\"700\"\n                    >\n                      <Spinner />\n                    </Flex>\n                  </Td>\n                </Tr>\n              ) : data?.length === 0 ? (\n                <Tr>\n                  <Td colSpan={columns.length}>\n                    <Text\n                      textAlign={\"center\"}\n                      width=\"100%\"\n                      color={textColor}\n                      fontSize=\"sm\"\n                      fontWeight=\"700\"\n                    >\n                      <DataNotFound />\n                    </Text>\n                  </Td>\n                </Tr>\n              ) : (\n                page?.map((row, i) => {\n                  prepareRow(row);\n                  return (\n                    <Tr {...row?.getRowProps()} key={i}>\n                      {row?.cells?.map((cell, index) => {\n                        let data = \"\";\n                        if (cell?.column.Header === \"title\") {\n                          data = (\n                            <Text\n                              me=\"10px\"\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              {cell?.value}\n                            </Text>\n                          );\n                        } else if (cell?.column.Header === \"create\") {\n                          data = (\n                            <Text\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              <Checkbox\n                                disabled={disable(cell?.row?.original)}\n                                isChecked={values?.access[i]?.create}\n                                defaultChecked={values?.access[i]?.create}\n                                onChange={handleCheckboxChange(i, 'create', \"view\")}\n                              />\n                            </Text>\n                          );\n                        } else if (cell?.column.Header === \"view\") {\n                          data = (\n                            <Text\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              <Checkbox\n                                disabled={disable(cell?.row?.original)}\n                                isChecked={values?.access[i]?.view}\n                                defaultChecked={values?.access[i]?.view}\n                                onChange={handleCheckboxChange(i, 'view', \"create\")}\n                              />\n                            </Text>\n                          );\n                        } else if (cell?.column.Header === \"update\") {\n                          data = (\n                            <Text\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              <Checkbox\n                                disabled={!values?.access[i]?.view}\n                                isChecked={values?.access[i]?.update}\n                                defaultChecked={values?.access[i]?.update}\n                                onChange={handleCheckboxChange(i, 'update')}\n                              />\n                            </Text>\n                          );\n                        } else if (cell?.column.Header === \"delete\") {\n                          data = (\n                            <Text\n                              color={textColor}\n                              fontSize=\"sm\"\n                              fontWeight=\"700\"\n                            >\n                              <Checkbox\n                                disabled={!values?.access[i]?.view}\n                                isChecked={values?.access[i]?.delete}\n                                defaultChecked={values?.access[i]?.delete}\n                                onChange={handleCheckboxChange(i, 'delete')}\n                              />\n                            </Text>\n                          );\n                        }\n                        return (\n                          <Td\n                            {...cell?.getCellProps()}\n                            key={index}\n                            fontSize={{ sm: \"14px\" }}\n                            minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                            borderColor=\"transparent\"\n                            sx={{\n                              display: cell?.column.Header === \"#\" && \"none\",\n                            }}\n                          >\n                            {data}\n                          </Td>\n                        );\n                      })}\n                    </Tr>\n                  );\n                })\n              )}\n            </Tbody>\n          </Table>\n        </ModalBody>\n        <ModalFooter>\n          <Button size=\"sm\" variant=\"brand\" onClick={handleSubmit}>\n            Save\n          </Button>\n          <Button size=\"sm\"\n            onClick={() => { resetForm(); setEditModal(false); setRoleModal(true); }}\n            variant=\"outline\"\n            colorScheme=\"red\"\n            sx={{\n              marginLeft: 2,\n              textTransform: \"capitalize\",\n            }}\n          >\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default ChangeAccess;\n","import { Button, Flex, Modal, ModalBody, Text, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useColorModeValue, Tr, Td, Spinner, Thead, Table, Tbody, Th, Checkbox } from '@chakra-ui/react';\nimport DataNotFound from 'components/notFoundData';\nimport Pagination from 'components/pagination/Pagination';\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { useGlobalFilter, usePagination, useSortBy, useTable } from 'react-table';\nimport { putApi } from 'services/api';\n\nconst RoleUser = (props) => {\n\n    const { setUserModal, userModal, tableData, columnsData, setOpenUser, _id, userRole, fetchData } = props;\n\n    const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\n    const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n    const columns = useMemo(() => columnsData, [columnsData]);\n    const [isLoding, setIsLoding] = useState(false);\n    const [selectedValues, setSelectedValues] = useState([]);\n    const data = useMemo(() => tableData, [tableData]);\n    const [gopageValue, setGopageValue] = useState();\n\n    const tableInstance = useTable(\n        {\n            columns, data,\n            initialState: { pageIndex: 0 }\n        },\n        useGlobalFilter,\n        useSortBy,\n        usePagination\n    );\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: { pageIndex, pageSize }\n    } = tableInstance;\n\n    if (pageOptions.length < gopageValue) {\n        setGopageValue(pageOptions.length)\n    }\n\n    const uniqueValues = [...new Set(selectedValues)];\n\n\n    const handleCheckboxChange = (event, value) => {\n        if (event.target.checked) {\n            setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\n        } else {\n            setSelectedValues((prevSelectedValues) =>\n                prevSelectedValues.filter((selectedValue) => selectedValue !== value)\n            );\n        }\n    };\n\n    useEffect(() => {\n        const pre = userRole?.map((item) => item._id)\n        setSelectedValues(pre)\n    }, [userModal])\n\n\n    const addUser = async () => {\n        const response = await putApi(`api/role-access/assignedUsers/${_id}`, uniqueValues)\n        if (response.status === 200) {\n            setUserModal(false)\n            fetchData()\n        }\n    }\n\n    return (\n        <Modal onClose={() => setUserModal(false)} isOpen={userModal} isCentered size={\"4xl\"} style={{ height: \"560px\" }}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>\n                    <Flex justifyContent={'space-between'}>\n                        <Text>Users</Text>\n                        <ModalCloseButton mt='2' />\n                    </Flex>\n                </ModalHeader>\n                <ModalBody overflowY={\"auto\"} height={\"400px\"}>\n                    <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\n                        <Thead>\n                            {headerGroups?.map((headerGroup, index) => (\n                                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\n                                    {headerGroup.headers?.map((column, index) => (\n                                        <Th\n                                            {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\n                                            pe=\"10px\"\n                                            key={index}\n                                            borderColor={borderColor}\n                                        >\n\n                                            <Flex\n                                                align=\"center\"\n                                                justifyContent={column.center ? \"center\" : \"start\"}\n                                                fontSize={{ sm: \"14px\", lg: \"16px\" }}\n                                                color=\" secondaryGray.900\"\n                                            >\n                                                <span style={{\n                                                    textTransform: \"capitalize\",\n                                                    //  marginRight: \"8px\"\n                                                }}>\n                                                    {column.render(\"Header\")}\n                                                </span>\n                                                {column.isSortable !== false && (\n                                                    <span>\n                                                        {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\n                                                    </span>\n                                                )}\n                                            </Flex>\n                                        </Th>\n                                    ))}\n                                </Tr>\n                            ))}\n                        </Thead>\n                        <Tbody {...getTableBodyProps()}>\n                            {isLoding ?\n                                <Tr>\n                                    <Td colSpan={columns?.length}>\n                                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                                            <Spinner />\n                                        </Flex>\n                                    </Td>\n                                </Tr>\n                                : data?.length === 0 ? (\n                                    <Tr>\n                                        <Td colSpan={columns.length}>\n                                            <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                                                <DataNotFound />\n                                            </Text>\n                                        </Td>\n                                    </Tr>\n                                ) : page?.map((row, i) => {\n                                    prepareRow(row);\n                                    return (\n                                        <Tr {...row?.getRowProps()} key={i}>\n                                            {row?.cells?.map((cell, index) => {\n                                                let data = \"\";\n                                                if (cell?.column.Header === \"#\") {\n                                                    data = (\n                                                        <Flex align=\"center\" >\n                                                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />\n                                                            <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                                                                {cell?.row?.index + 1}\n                                                            </Text>\n                                                        </Flex>\n                                                    );\n                                                } else if (cell?.column.Header === \"email Id\") {\n                                                    data = (\n                                                        <Text\n                                                            me=\"10px\"\n                                                            color={textColor}\n                                                            fontSize=\"sm\"\n                                                            fontWeight=\"700\"\n                                                        >\n                                                            {cell?.value}\n                                                        </Text>\n                                                    );\n                                                } else if (cell?.column.Header === \"first Name\") {\n                                                    data = (\n                                                        <Text\n                                                            me=\"10px\"\n                                                            color={textColor}\n                                                            fontSize=\"sm\"\n                                                            fontWeight=\"700\"\n                                                        >\n                                                            {cell?.value ? cell?.value : ' - '}\n                                                        </Text>\n                                                    );\n                                                } else if (cell?.column.Header === \"last Name\") {\n                                                    data = (\n                                                        <Text\n                                                            me=\"10px\"\n                                                            color={textColor}\n                                                            fontSize=\"sm\"\n                                                            fontWeight=\"700\"\n                                                        >\n                                                            {cell?.value ? cell?.value : ' - '}\n                                                        </Text>\n                                                    );\n                                                } else if (cell?.column.Header === \"role\") {\n                                                    data = (\n                                                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                                                            {cell?.value}\n                                                        </Text>\n                                                    );\n                                                }\n                                                return (\n                                                    <Td\n                                                        {...cell?.getCellProps()}\n                                                        key={index}\n                                                        fontSize={{ sm: \"14px\" }}\n                                                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                                                        borderColor=\"transparent\"\n                                                    >\n                                                        {data}\n                                                    </Td>\n                                                );\n                                            })}\n                                        </Tr>\n                                    );\n                                })}\n                        </Tbody>\n                    </Table>\n                    {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\n\n                </ModalBody>\n                <ModalFooter>\n                    <Button variant=\"brand\" size=\"sm\" onClick={() => { addUser(); setOpenUser(true) }}>\n                        Save\n                    </Button>\n                    <Button size=\"sm\"\n                        onClick={() => { setUserModal(false); setSelectedValues([]); setOpenUser(true) }}\n                        variant=\"outline\"\n                        colorScheme=\"red\"\n                        sx={{\n                            marginLeft: 2,\n                            textTransform: \"capitalize\",\n                        }}\n                    >\n                        Close\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default RoleUser","import React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Flex,\n  Text,\n  Td,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\nimport Pagination from \"components/pagination/Pagination\";\nimport RoleUser from \"./roleUser\";\nimport { getApi } from \"services/api\";\nimport DataNotFound from \"components/notFoundData\";\n\nfunction UserModal(props) {\n  const {\n    tableData,\n    columnsData,\n    isOpen,\n    _id,\n    setRoleModal,\n    setOpenUser,\n    fetchData,\n  } = props;\n\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const [selectedValues, setSelectedValues] = useState([]);\n  const [isLoding, setIsLoding] = useState(false);\n  const data = useMemo(() => tableData, [tableData]);\n  const [userModal, setUserModal] = useState(false);\n  const [userData, setUserData] = useState([]);\n  const [gopageValue, setGopageValue] = useState();\n\n  const tableInstance = useTable(\n    {\n      columns, data,\n      initialState: { pageIndex: 0 }\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize }\n  } = tableInstance;\n\n  if (pageOptions.length < gopageValue) {\n    setGopageValue(pageOptions.length)\n  }\n\n\n  const handleCheckboxChange = (event, value) => {\n    if (event.target.checked) {\n      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\n    } else {\n      setSelectedValues((prevSelectedValues) =>\n        prevSelectedValues.filter((selectedValue) => selectedValue !== value)\n      );\n    }\n  };\n\n  const userFetchData = async () => {\n    let result = await getApi('api/user/?role=user');\n    setUserData(result?.data?.user);\n  }\n\n  useEffect(() => {\n    userFetchData()\n  }, [])\n\n\n\n  return (\n    <>\n      <Modal onClose={() => setOpenUser(false)} isOpen={isOpen} isCentered size={\"4xl\"} style={{ height: \"560px\" }}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader height={\"580px\"} >\n            <Flex justifyContent={'space-between'}>\n              <Text>Users</Text>\n              <Button variant=\"brand\" size=\"sm\" me={'2rem'} onClick={() => { setOpenUser(false); setUserModal(true) }}>Manage Users</Button>\n              <ModalCloseButton mt='2' />\n            </Flex>\n          </ModalHeader>\n          <ModalBody overflow={\"auto\"} height={\"400px\"}>\n            <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\n              <Thead>\n                {headerGroups?.map((headerGroup, index) => (\n                  <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\n                    {headerGroup.headers?.map((column, index) => (\n                      <Th\n                        {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\n                        pe=\"10px\"\n                        key={index}\n                        borderColor={borderColor}\n                      >\n\n                        <Flex\n                          align=\"center\"\n                          justifyContent={column.center ? \"center\" : \"start\"}\n                          fontSize={{ sm: \"14px\", lg: \"16px\" }}\n                          color=\" secondaryGray.900\"\n                        >\n                          <span style={{\n                            textTransform: \"capitalize\",\n                          }}>\n                            {column.render(\"Header\")}\n                          </span>\n                          {column.isSortable !== false && (\n                            <span>\n                              {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\n                            </span>\n                          )}\n                        </Flex>\n                      </Th>\n                    ))}\n                  </Tr>\n                ))}\n              </Thead>\n              <Tbody {...getTableBodyProps()}>\n                {isLoding ?\n                  <Tr>\n                    <Td colSpan={columns?.length}>\n                      <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                        <Spinner />\n                      </Flex>\n                    </Td>\n                  </Tr>\n                  : data?.length === 0 ? (\n                    <Tr>\n                      <Td colSpan={columns.length}>\n                        <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          <DataNotFound />\n                        </Text>\n                      </Td>\n                    </Tr>\n                  ) : page?.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                      <Tr {...row?.getRowProps()} key={i}>\n                        {row?.cells?.map((cell, index) => {\n                          let data = \"\";\n                          if (cell?.column.Header === \"#\") {\n                            data = (\n                              <Flex align=\"center\" >\n                                <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                                  {cell?.row?.index + 1}\n                                </Text>\n                              </Flex>\n                            );\n                          } else if (cell?.column.Header === \"email Id\") {\n                            data = (\n                              <Text\n                                me=\"10px\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value}\n                              </Text>\n                            );\n                          } else if (cell?.column.Header === \"first Name\") {\n                            data = (\n                              <Text\n                                me=\"10px\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? cell?.value : ' - '}\n                              </Text>\n                            );\n                          } else if (cell?.column.Header === \"last Name\") {\n                            data = (\n                              <Text\n                                me=\"10px\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? cell?.value : ' - '}\n                              </Text>\n                            );\n                          } else if (cell?.column.Header === \"role\") {\n                            data = (\n                              <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                                {cell?.value}\n                              </Text>\n                            );\n                          }\n                          return (\n                            <Td\n                              {...cell?.getCellProps()}\n                              key={index}\n                              fontSize={{ sm: \"14px\" }}\n                              minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                              borderColor=\"transparent\"\n                            >\n                              {data}\n                            </Td>\n                          );\n                        })}\n                      </Tr>\n                    );\n                  })}\n              </Tbody>\n            </Table>\n            {data?.length > 5 && (\n              <Pagination\n                gotoPage={gotoPage}\n                gopageValue={gopageValue}\n                setGopageValue={setGopageValue}\n                pageCount={pageCount}\n                canPreviousPage={canPreviousPage}\n                previousPage={previousPage}\n                canNextPage={canNextPage}\n                pageOptions={pageOptions}\n                setPageSize={setPageSize}\n                nextPage={nextPage}\n                pageSize={pageSize}\n                pageIndex={pageIndex}\n              />\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                setOpenUser(false);\n                setRoleModal(true);\n              }}\n              variant=\"outline\"\n              colorScheme=\"red\"\n              sx={{\n                marginLeft: 2,\n                textTransform: \"capitalize\",\n              }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <RoleUser\n        fetchData={fetchData}\n        userModal={userModal}\n        setOpenUser={setOpenUser}\n        _id={_id}\n        setUserModal={setUserModal}\n        userFetchData={userFetchData}\n        userRole={tableData}\n        tableData={userData || []}\n        columnsData={columnsData || []}\n      />\n    </>\n  );\n}\n\nexport default UserModal;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Flex,\n  Text,\n  Td,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport Spinner from \"components/spinner/Spinner\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport ChangeAccess from \"../changeAccess\";\nimport UserModal from \"./userModal\";\nimport { getApi } from \"services/api\";\nimport DataNotFound from \"components/notFoundData\";\n\nfunction RoleModal(props) {\n  const {\n    name,\n    tableData,\n    fetchData,\n    columnsData,\n    isOpen,\n    setAction,\n    setAccess,\n    _id,\n    onOpen,\n    setRoleModal,\n  } = props;\n\n  const tableColumns = [\n    {\n      Header: \"#\",\n      accessor: \"_id\",\n      isSortable: false,\n      width: 10\n    },\n    { Header: 'email Id', accessor: 'username' },\n    { Header: \"first Name\", accessor: \"firstName\", },\n    { Header: \"last Name\", accessor: \"lastName\", },\n    { Header: \"role\", accessor: \"role\", },\n  ];\n\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const [isLoding, setIsLoding] = useState(false);\n\n  const [editModal, setEditModal] = useState(false);\n  const [openUser, setOpenUser] = useState();\n  const [gopageValue, setGopageValue] = useState();\n  const data = useMemo(() => tableData || [], [tableData]);\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [userdata, setUserData] = useState([]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize: 500 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  );\n\n  const {\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageOptions,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  if (pageOptions.length < gopageValue) {\n    setGopageValue(pageOptions.length);\n  }\n\n  const userFetchData = async () => {\n    if (_id) {\n      let result = await getApi('api/role-access/assignedUsers/', _id);\n      setUserData(result?.data);\n    }\n  }\n\n  useEffect(() => {\n    userFetchData()\n  }, [_id])\n\n  return (\n    <>\n      <Modal onClose={() => setRoleModal(false)} isOpen={isOpen} isCentered size={\"xl\"}>\n        <ModalOverlay />\n        <ModalContent height={\"580px\"} maxWidth={\"2xl\"}>\n          <ModalHeader>\n            <Flex justifyContent={'space-between'}>\n              <Text textTransform={\"capitalize\"}>{name} Access</Text>\n              <Text style={{\n                marginRight: \"25px\",\n                fontSize: \"15px\",\n                fontWeight: \"700\",\n                marginTop: '5px',\n                color: 'blue',\n                cursor: 'pointer',\n                textDecoration: 'underline'\n              }} onClick={() => { setOpenUser(true); setRoleModal(false); }}>View user's in {name} role</Text>\n              <ModalCloseButton mt='2' />\n            </Flex>\n          </ModalHeader>\n          <ModalBody overflow={\"auto\"} height={\"400px\"}>\n            <Table>\n              <Thead>\n                {headerGroups?.map((headerGroup, index) => (\n                  <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\n                    {headerGroup.headers?.map((column, index) => (\n                      <Th\n                        sx={{ width: \"10px\" }}\n                        key={index}\n                        borderColor={borderColor}\n                        display={column.display === false && \"none\"}\n                      >\n                        {column.display !== false && column.render(\"Header\")}\n                      </Th>\n                    ))}\n                  </Tr>\n                ))}\n              </Thead>\n              <Tbody {...getTableBodyProps()}>\n                {isLoding ? (\n                  <Tr>\n                    <Td colSpan={columns?.length}>\n                      <Flex\n                        justifyContent={\"center\"}\n                        alignItems={\"center\"}\n                        width=\"100%\"\n                        color={textColor}\n                        fontSize=\"sm\"\n                        fontWeight=\"700\"\n                      >\n                        <Spinner />\n                      </Flex>\n                    </Td>\n                  </Tr>\n                ) : data?.length === 0 ? (\n                  <Tr>\n                    <Td colSpan={columns.length}>\n                      <Text\n                        textAlign={\"center\"}\n                        width=\"100%\"\n                        color={textColor}\n                        fontSize=\"sm\"\n                        fontWeight=\"700\"\n                      >\n                        <DataNotFound />\n                      </Text>\n                    </Td>\n                  </Tr>\n                ) : (\n                  page?.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                      <Tr {...row?.getRowProps()} key={i}>\n                        {row?.cells?.map((cell, index) => {\n                          let data = \"\";\n                          if (cell?.column.Header === \"title\") {\n                            data = (\n                              <Text\n                                me=\"10px\"\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value}\n                              </Text>\n                            );\n                          } else if (cell?.column.Header === \"create\") {\n                            data = (\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? 'Yes' : 'No'}\n                              </Text>\n                            );\n                          } else if (cell?.column.Header === \"view\") {\n                            data = (\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? 'Yes' : 'No'}\n                              </Text>\n                            );\n                          } else if (cell?.column.Header === \"update\") {\n                            data = (\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? 'Yes' : 'No'}\n                              </Text>\n                            );\n                          } else if (cell?.column.Header === \"delete\") {\n                            data = (\n                              <Text\n                                color={textColor}\n                                fontSize=\"sm\"\n                                fontWeight=\"700\"\n                              >\n                                {cell?.value ? 'Yes' : 'No'}\n                              </Text>\n                            );\n                          }\n                          return (\n                            <Td\n                              {...cell?.getCellProps()}\n                              key={index}\n                              fontSize={{ sm: \"14px\" }}\n                              minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                              borderColor=\"transparent\"\n                              sx={{\n                                display: cell?.column.Header === \"#\" && \"none\",\n                              }}\n                            >\n                              {data}\n                            </Td>\n                          );\n                        })}\n                      </Tr>\n                    );\n                  })\n                )}\n              </Tbody>\n            </Table>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"brand\" size=\"sm\" onClick={() => { setEditModal(true); setRoleModal(false) }}>\n              Change Access\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={() => setRoleModal(false)}\n              variant=\"outline\"\n              colorScheme=\"red\"\n              sx={{\n                marginLeft: 2,\n                textTransform: \"capitalize\",\n              }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <ChangeAccess tableData={tableData ?? []} accessRole={tableData ?? []} setAccess={setAccess} setRoleModal={setRoleModal} columnsData={columnsData ?? []} _id={_id} fetchData={fetchData} name={name} setEditModal={setEditModal} setAction={setAction} editModal={editModal} />\n      <UserModal isOpen={openUser}\n        setRoleModal={setRoleModal}\n        setOpenUser={setOpenUser}\n        onOpen={onOpen}\n        columnsData={tableColumns ?? []}\n        tableData={userdata ?? []}\n        setAction={setAction}\n        _id={_id}\n        fetchData={userFetchData}\n        userdata={userdata}\n      />\n    </>\n  );\n}\n\nexport default RoleModal;\n","import { CloseIcon } from '@chakra-ui/icons';\nimport { Button, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react';\nimport Spinner from 'components/spinner/Spinner';\nimport { useFormik } from 'formik';\nimport React, { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { postApi } from 'services/api';\nimport * as yup from 'yup'\n\nconst AddRole = (props) => {\n    const { onClose, isOpen, setAction } = props;\n    const [isLoding, setIsLoding] = useState(false);\n\n    const initialValues = {\n        roleName: '',\n        description: '',\n    };\n\n    const validationSchema = yup.object({\n        roleName: yup.string().required(\"Role Name is required\"),\n        description: yup.string().required(\"Description is required\")\n    });\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: (values, { resetForm }) => {\n            AddData();\n            resetForm();\n        },\n    });\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\n\n    const AddData = async () => {\n        try {\n            setIsLoding(true)\n            let response = await postApi('api/role-access/add', values)\n            if (response && response.status === 200) {\n                onClose(false);\n                setAction((pre) => !pre)\n            } else {\n                toast.error(response.response.data?.message)\n            }\n        } catch (e) {\n            console.log(e);\n        }\n        finally {\n            setIsLoding(false)\n        }\n    };\n\n    return (\n        <Modal isOpen={isOpen} isCentered>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader justifyContent='space-between' display='flex' >\n                    Add Role\n                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />\n                </ModalHeader>\n                <ModalBody>\n\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Role Name<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.roleName}\n                                name=\"roleName\"\n                                placeholder='Enter Role Name'\n                                fontWeight='500'\n                                borderColor={errors.roleName && touched.roleName ? \"red.300\" : null}\n                            />\n                            <Text mb='10px' fontSize={'sm'} color={'red'}> {errors.roleName && touched.roleName && errors.roleName}</Text>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }}>\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Description<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                onChange={handleChange} onBlur={handleBlur}\n                                value={values.description}\n                                name=\"description\"\n                                placeholder='Enter Description'\n                                fontWeight='500'\n                                borderColor={errors.description && touched.description ? \"red.300\" : null}\n                            />\n                            <Text mb='10px' fontSize={'sm'} color={'red'}> {errors.description && touched.description && errors.description}</Text>\n                        </GridItem>\n                    </Grid>\n\n                </ModalBody>\n                <ModalFooter>\n                    <Button size=\"sm\" variant='brand' mr={1} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>\n                    <Button size=\"sm\" variant='outline' color={'red'} colorScheme='red' onClick={() => {\n                        formik.resetForm()\n                        onClose(false)\n                    }}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    )\n}\n\nexport default AddRole\n","import { Button, Text, useDisclosure } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport { getApi } from \"services/api\";\nimport CommonCheckTable from \"components/reactTable/checktable\";\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { useNavigate } from \"react-router-dom\";\nimport RoleModal from \"./components/roleModal\";\nimport AddRole from \"./Add\";\n\nconst Index = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [roleModal, setRoleModal] = useState(false);\n  const [access, setAccess] = useState([])\n  const [roleId, setRoleId] = useState('')\n  const [searchboxOutside, setSearchboxOutside] = useState('');\n  const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);\n  const [displaySearchData, setDisplaySearchData] = useState(false);\n  const [roleName, setRoleName] = useState('')\n  const [searchedData, setSearchedData] = useState([]);\n\n  const columns = [\n    {\n      Header: \"#\",\n      accessor: \"_id\",\n      isSortable: false,\n      width: 10,\n      display: false\n    },\n    {\n      Header: \"Role Name\", accessor: \"roleName\", cell: (cell) => (\n        <Text\n          me=\"10px\"\n          onClick={() => { setRoleModal(true); setRoleName(cell?.value); setRoleId(cell?.row?.original?._id); setAccess(cell?.row?.original?.access); }}\n          color='brand.600'\n          sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline', cursor: 'pointer' } }}\n          fontSize=\"sm\"\n          fontWeight=\"700\"\n        >\n          {cell?.value}\n        </Text>\n      )\n    },\n    { Header: \"Description\", accessor: \"description\" }\n  ];\n  const rowColumns = [\n    {\n      Header: \"#\",\n      accessor: \"_id\",\n      isSortable: false,\n      width: 10,\n      display: false\n    },\n\n    { Header: \"title\", accessor: \"title\" },\n    { Header: \"create\", accessor: \"create\", width: '20px' },\n    { Header: \"view\", accessor: \"view\", width: '20px' },\n    { Header: \"update\", accessor: \"update\", width: '20px' },\n    { Header: \"delete\", accessor: \"delete\", width: '20px' },\n  ]\n  const [action, setAction] = useState(false);\n  const [isLoding, setIsLoding] = useState(false);\n  const [data, setData] = useState([]);\n  const size = \"lg\";\n  const navigate = useNavigate()\n\n  const fetchData = async () => {\n    setIsLoding(true);\n    let result = await getApi(\"api/role-access\");\n    setData(result.data);\n    setIsLoding(false);\n  };\n\n  useEffect(() => {\n    fetchData()\n  }, [action])\n\n  return (\n    <div>\n      <CommonCheckTable\n        title={'Roles'}\n        isLoding={isLoding}\n        columnData={columns ?? []}\n        // dataColumn={columns ?? []}\n        allData={data || []}\n        tableData={data}\n        // AdvanceSearch={() => \"\"}\n        AdvanceSearch={false}\n        tableCustomFields={[]}\n        searchedDataOut={searchedData}\n        searchDisplay={displaySearchData}\n        setSearchDisplay={setDisplaySearchData}\n        setSearchedDataOut={setSearchedData}\n        searchboxOutside={searchboxOutside}\n        // setSearchboxOutside={setSearchboxOutside}\n        BackButton={<Button onClick={() => navigate('/admin-setting')} variant=\"brand\" size=\"sm\" leftIcon={<IoIosArrowBack />} ml={2}>Back</Button>}\n        deleteMany={true}\n        access={true}\n        checkBox={false}\n        getTagValuesOutSide={getTagValuesOutSide}\n        setGetTagValuesOutside={setGetTagValuesOutside}\n        ManageGrid={false}\n        onOpen={onOpen}\n        customSearch={true}\n      />\n      <AddRole isOpen={isOpen} size={\"sm\"} setAction={setAction} onClose={onClose} />\n      {access && <RoleModal isOpen={roleModal}\n        setRoleModal={setRoleModal}\n        onOpen={onOpen}\n        isLoding={isLoding}\n        columnsData={rowColumns ?? []}\n        name={roleName}\n        _id={roleId}\n        tableData={access ?? []}\n        setAccess={setAccess}\n        fetchData={fetchData}\n        setAction={setAction}\n      />}\n    </div>\n  );\n};\n\nexport default Index;\n"],"names":["props","columnsData","name","tableData","fetchData","setAccess","_id","setRoleModal","editModal","setEditModal","textColor","useColorModeValue","borderColor","columns","useMemo","isLoding","setIsLoding","useState","gopageValue","setGopageValue","data","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableBodyProps","headerGroups","prepareRow","page","pageOptions","setPageSize","state","pageSize","length","initialValues","roleName","access","formik","useFormik","enableReinitialize","onSubmit","values","_ref","resetForm","EditData","handleSubmit","setFieldValue","handleCheckboxChange","index","fieldName","secondFieldName","event","checked","target","leadsIndex","findIndex","accessItem","title","contactsIndex","updatedAccess","map","item","idx","updatedItem","_objectSpread","update","delete","finalUpdatedAccessWith","_updatedAccess$contac","_updatedAccess$leadsI","view","includes","create","async","putApi","concat","status","e","console","log","disable","cell","_values$access","some","i","useEffect","Array","isArray","_jsxs","Modal","onClose","isOpen","isCentered","size","children","_jsx","ModalOverlay","ModalContent","height","maxWidth","ModalHeader","textTransform","ModalCloseButton","ModalBody","overflow","Table","Thead","headerGroup","_headerGroup$headers","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","sx","width","pe","display","Flex","justify","align","fontSize","sm","lg","color","render","Tbody","Td","colSpan","justifyContent","alignItems","fontWeight","Spinner","Text","textAlign","DataNotFound","row","_row$cells","getRowProps","cells","Header","me","value","_cell$row","_values$access$i","_values$access$i2","Checkbox","disabled","original","isChecked","defaultChecked","onChange","_cell$row2","_values$access$i3","_values$access$i4","_values$access$i5","_values$access$i6","_values$access$i7","_values$access$i8","_values$access$i9","_values$access$i0","getCellProps","minW","md","ModalFooter","Button","variant","onClick","colorScheme","marginLeft","setUserModal","userModal","setOpenUser","userRole","selectedValues","setSelectedValues","getTableProps","canPreviousPage","canNextPage","pageCount","gotoPage","nextPage","previousPage","uniqueValues","Set","pre","style","mt","overflowY","mb","getHeaderProps","isSortable","getSortByToggleProps","center","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","prevSelectedValues","filter","selectedValue","Pagination","addUser","userData","setUserData","userFetchData","_result$data","result","getApi","user","_Fragment","RoleUser","setAction","onOpen","tableColumns","accessor","openUser","userdata","JSON","parse","localStorage","getItem","marginRight","marginTop","cursor","textDecoration","ChangeAccess","accessRole","UserModal","validationSchema","yup","required","description","AddData","errors","touched","handleBlur","handleChange","response","postApi","_response$response$da","toast","error","message","IconButton","icon","CloseIcon","Grid","templateColumns","gap","GridItem","base","FormLabel","ms","Input","onBlur","placeholder","mr","Index","useDisclosure","roleModal","roleId","setRoleId","searchboxOutside","setSearchboxOutside","getTagValuesOutSide","setGetTagValuesOutside","displaySearchData","setDisplaySearchData","setRoleName","searchedData","setSearchedData","_cell$row$original","_cell$row2$original","rowColumns","action","setData","navigate","useNavigate","CommonCheckTable","columnData","allData","AdvanceSearch","tableCustomFields","searchedDataOut","searchDisplay","setSearchDisplay","setSearchedDataOut","BackButton","leftIcon","IoIosArrowBack","ml","deleteMany","checkBox","ManageGrid","customSearch","AddRole","RoleModal"],"sourceRoot":""}