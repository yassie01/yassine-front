{"version":3,"file":"static/js/1887.1904b180.chunk.js","mappings":"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","sources":["views/admin/task/components/AddEdit.js","components/commonTableModel/Contact.js","components/commonTableModel/ContactModel.js","components/commonTableModel/LeadModel.js"],"sourcesContent":["import { CloseIcon } from '@chakra-ui/icons';\nimport { Button, Checkbox, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';\nimport ContactModel from \"components/commonTableModel/ContactModel\";\nimport LeadModel from \"components/commonTableModel/LeadModel\";\nimport Spinner from 'components/spinner/Spinner';\nimport { useFormik } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { LiaMousePointerSolid } from 'react-icons/lia';\nimport { TaskSchema } from 'schema';\nimport { getApi, postApi } from 'services/api';\nimport moment from 'moment';\nimport { putApi } from 'services/api';\nimport dayjs from 'dayjs';\nimport { useSelector } from 'react-redux';\nimport { HasAccess } from \"../../../../redux/accessUtils\";\n\nconst AddEdit = (props) => {\n    const { onClose, isOpen, fetchData, userAction, setAction, id, view, data } = props\n    const [isChecked, setIsChecked] = useState(false);\n    const userId = JSON.parse(localStorage.getItem('user'))._id\n    const [assignToLeadData, setAssignToLeadData] = useState([]);\n    const [assignToContactData, setAssignToContactData] = useState([]);\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const [isLoding, setIsLoding] = useState(false)\n    const [contactModelOpen, setContactModel] = useState(false);\n    const [leadModelOpen, setLeadModel] = useState(false);\n    const leadData = useSelector((state) => state?.leadData?.data);\n\n\n    const today = new Date().toISOString().split('T')[0];\n    const todayTime = new Date().toISOString().split('.')[0];\n\n    const [leadAccess, contactAccess] = HasAccess(['Leads', 'Contacts']);\n\n    const contactData = useSelector((state) => state?.contactData?.data)\n\n    const initialValues = {\n        title: '',\n        category: props.leadContect === 'contactView' ? 'Contact' : props.leadContect === 'leadView' ? 'Lead' : 'None',\n        description: '',\n        notes: '',\n        assignTo: props.leadContect === 'contactView' && id ? id : '',\n        assignToLead: props.leadContect === 'leadView' && id ? id : '',\n        reminder: '',\n        start: '',\n        end: '',\n        backgroundColor: '',\n        borderColor: '#ffffff',\n        textColor: '',\n        allDay: false,\n        display: '',\n        url: '',\n        createBy: userId,\n    }\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: TaskSchema,\n        enableReinitialize: true,\n        onSubmit: (values, { resetForm }) => {\n            AddData();\n            resetForm()\n        },\n    });\n\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\n\n    const AddData = async () => {\n        if (userAction === \"add\") {\n            try {\n                setIsLoding(true)\n\n                if (values?.start) {\n                    values.start = values?.allDay ? moment(values?.start).format('YYYY-MM-DD') : moment(values?.start).format('YYYY-MM-DD HH:mm');\n                }\n                if (values?.end) {\n                    values.end = values?.allDay ? moment(values?.end).format('YYYY-MM-DD') : moment(values?.end).format('YYYY-MM-DD HH:mm');\n                }\n\n                let response = await postApi('api/task/add', values)\n                if (response.status === 200) {\n                    formik.resetForm()\n                    onClose();\n                    fetchData(1)\n                }\n            } catch (e) {\n                console.log(e);\n            }\n            finally {\n                setIsLoding(false)\n            }\n        } else if (userAction === \"edit\") {\n            try {\n                setIsLoding(true)\n\n                if (values?.start) {\n                    values.start = values?.allDay ? moment(values?.start).format('YYYY-MM-DD') : moment(values?.start).format('YYYY-MM-DD HH:mm');\n                }\n                if (values?.end) {\n                    values.end = values?.allDay ? moment(values?.end).format('YYYY-MM-DD') : moment(values?.end).format('YYYY-MM-DD HH:mm');\n                }\n\n                let response = await putApi(`api/task/edit/${id}`, values)\n                if (response.status === 200) {\n                    formik.resetForm()\n                    onClose();\n                    setAction((pre) => !pre)\n                }\n            } catch (e) {\n                console.log(e);\n            }\n            finally {\n                setIsLoding(false)\n            }\n        }\n    };\n    const fetchTaskData = async () => {\n        if (id) {\n            try {\n                setIsLoding(true)\n                let result = await getApi('api/task/view/', id)\n                setFieldValue('title', result?.data?.title)\n                setFieldValue('category', result?.data?.category)\n                setFieldValue('description', result?.data?.description)\n                setFieldValue('notes', result?.data?.notes)\n                setFieldValue('assignTo', result?.data?.assignTo)\n                setFieldValue('reminder', result?.data?.reminder)\n                setFieldValue('start', result?.data?.start)\n                setFieldValue('end', result?.data?.end)\n                setFieldValue('backgroundColor', result?.data?.backgroundColor)\n                setFieldValue('borderColor', result?.data?.borderColor)\n                setFieldValue('textColor', result?.data?.textColor)\n                setFieldValue('display', result?.data?.display)\n                setFieldValue('url', result?.data?.url)\n                setFieldValue(\"status\", result?.data?.status)\n                setFieldValue('assignToLead', result?.data?.assignToLead)\n                // setFieldValue('allDay', result?.data?.allDay === 'Yes' ? 'Yes' : 'No')\n                setFieldValue('allDay', result?.data?.allDay)\n\n                // setIsChecked(result?.data?.allDay === 'Yes' ? true : false)\n            }\n            catch (e) {\n                console.log(e);\n            }\n            finally {\n                setIsLoding(false)\n            }\n        } else if (data) {\n            setFieldValue('title', data?.title)\n            setFieldValue('category', data?.category)\n            setFieldValue('description', data?.description)\n            setFieldValue('notes', data?.notes)\n            setFieldValue('assignTo', data?.assignTo)\n            setFieldValue('reminder', data?.reminder)\n            setFieldValue('start', data?.start)\n            setFieldValue('end', data?.end)\n            setFieldValue('backgroundColor', data?.backgroundColor)\n            setFieldValue('borderColor', data?.borderColor)\n            setFieldValue('textColor', data?.textColor)\n            setFieldValue('display', data?.display)\n            setFieldValue('url', data?.url)\n            setFieldValue(\"status\", data?.status)\n            setFieldValue('assignToLead', data?.assignToLead)\n            setFieldValue('allDay', data?.allDay === 'Yes' ? 'Yes' : 'No')\n            setFieldValue('allDay', data?.allDay)\n\n            // setIsChecked(data?.allDay === 'Yes' ? true : false)\n        }\n    }\n\n    useEffect(async () => {\n        values.start = props?.date\n        if (view === true) {\n            if (values.category === \"Contact\" && assignToContactData.length <= 0) {\n                setAssignToContactData(contactData)\n                // result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)\n                // setAssignToContactData(result?.data)\n            } else if (values.category === \"Lead\" && assignToLeadData.length <= 0) {\n                setAssignToLeadData(leadData)\n            }\n        } else {\n            try {\n                let result\n                if (values.category === \"Contact\" && assignToContactData.length <= 0) {\n                    result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)\n                    setAssignToContactData(result?.data)\n                } else if (values.category === \"Lead\" && assignToLeadData.length <= 0) {\n                    result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);\n                    setAssignToLeadData(result?.data)\n                }\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n    }, [props, values.category])\n    useEffect(() => {\n        if (userAction === \"edit\" || data) {\n            fetchTaskData()\n        }\n        fetchTaskData()\n\n    }, [userAction, id, data])\n\n    return (\n        <Modal isOpen={isOpen} size={'xl'} >\n            {!props.from && <ModalOverlay />}\n            <ModalContent overflowY={\"auto\"} height={\"600px\"}>\n                <ModalHeader justifyContent='space-between' display='flex' >\n                    {\n                        userAction === \"add\" ? \"Create Task\" : \"Edit Task\"\n                    }\n\n                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />\n                </ModalHeader>\n                <ModalBody overflowY={\"auto\"} height={\"700px\"}>\n                    {/* Contact Model  */}\n                    <ContactModel isOpen={contactModelOpen} data={assignToContactData} onClose={setContactModel} values={values} fieldName='assignTo' setFieldValue={setFieldValue} />\n                    {/* Lead Model  */}\n                    <LeadModel isOpen={leadModelOpen} data={assignToLeadData} onClose={setLeadModel} values={values} fieldName='assignToLead' setFieldValue={setFieldValue} />\n                    {isLoding ?\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\n                            <Spinner />\n                        </Flex>\n                        :\n                        <Grid templateColumns=\"repeat(12, 1fr)\" gap={3} >\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Title<Text color={\"red\"}>*</Text>\n                                </FormLabel>\n                                <Input\n                                    fontSize='sm'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.title}\n                                    name=\"title\"\n                                    placeholder='Title'\n                                    fontWeight='500'\n                                    borderColor={errors?.title && touched?.title ? \"red.300\" : null}\n                                />\n                                <Text mb='10px' color={'red'} fontSize='sm'> {errors.title && touched.title && errors.title}</Text>\n                            </GridItem>\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Related\n                                </FormLabel>\n                                <RadioGroup onChange={(e) => { setFieldValue('category', e); setFieldValue('assignTo', null); setFieldValue('assignToLead', null); }} value={values.category}>\n                                    <Stack direction='row'>\n                                        <Stack direction='row'>\n                                            <Radio value='None'>None</Radio>\n                                            {props.leadContect === 'contactView' && <Radio value='Contact'>Contact</Radio>}\n                                            {props.leadContect === 'leadView' && <Radio value='Lead'>Lead</Radio>}\n                                            {!props.leadContect &&\n                                                <>\n                                                    {(user?.role === \"superAdmin\" || contactAccess?.create) && <Radio value='Contact'>Contact</Radio>}\n                                                    {(user?.role === \"superAdmin\" || leadAccess?.create) && <Radio value='Lead'>Lead</Radio>}\n                                                </>\n                                            }\n                                        </Stack>\n\n                                    </Stack>\n                                </RadioGroup>\n                                <Text mb='10px' color={'red'}> {errors.category && touched.category && errors.category}</Text>\n                            </GridItem>\n                            <GridItem colSpan={{ base: 12, md: values.category === \"None\" ? 12 : 6 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Description\n                                </FormLabel>\n                                <Input\n                                    fontSize='sm'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.description}\n                                    name=\"description\"\n                                    placeholder='Description'\n                                    fontWeight='500'\n                                    borderColor={errors?.description && touched?.description ? \"red.300\" : null}\n                                />\n                                <Text mb='10px' color={'red'}> {errors.description && touched.description && errors.description}</Text>\n                            </GridItem>\n                            {values.category === \"Contact\" ?\n                                <>\n                                    <GridItem colSpan={{ base: 12, md: 6 }} >\n                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                            Assign To  Contact\n                                        </FormLabel>\n                                        <Flex justifyContent={'space-between'}>\n                                            <Select\n                                                value={values.assignTo}\n                                                name=\"assignTo\"\n                                                onChange={handleChange}\n                                                mb={errors.assignTo && touched.assignTo ? undefined : '10px'}\n                                                fontWeight='500'\n                                                placeholder={'Assign To'}\n                                                borderColor={errors.assignTo && touched.assignTo ? \"red.300\" : null}\n                                            >\n                                                {assignToContactData?.map((item) => {\n                                                    return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>\n                                                })}\n                                            </Select>\n                                            <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\n                                        </Flex>\n                                        <Text mb='10px' color={'red'}> {errors.assignTo && touched.assignTo && errors.assignTo}</Text>\n                                    </GridItem>\n                                </>\n                                : values.category === \"Lead\" ?\n                                    <>\n                                        <GridItem colSpan={{ base: 12, md: 6 }} >\n                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                                Assign To Lead\n                                            </FormLabel>\n                                            <Flex justifyContent={'space-between'}>\n                                                <Select\n                                                    value={values.assignToLead}\n                                                    name=\"assignToLead\"\n                                                    onChange={handleChange}\n                                                    mb={errors.assignToLead && touched.assignToLead ? undefined : '10px'}\n                                                    fontWeight='500'\n                                                    placeholder={'Assign To'}\n                                                    borderColor={errors.assignToLead && touched.assignToLead ? \"red.300\" : null}\n                                                >\n                                                    {assignToLeadData?.map((item) => {\n                                                        return <option value={item._id} key={item._id}>{item.leadName}</option>\n                                                    })}\n                                                </Select>\n                                                <IconButton onClick={() => setLeadModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\n                                            </Flex>\n                                            <Text mb='10px' color={'red'}> {errors.assignToLead && touched.assignToLead && errors.assignToLead}</Text>\n                                        </GridItem>\n                                    </>\n                                    : ''\n                            }\n                            <GridItem colSpan={{ base: 12 }} >\n                                <Checkbox isChecked={values?.allDay} name='allDay'\n                                    onChange={handleChange}\n                                // onChange={(e) => {\n                                //     const target = e.target.checked;\n                                //     // setFieldValue('allDay', e.target.checked === true ? 'Yes' : 'No');\n                                //     setIsChecked(target);\n                                // }}\n                                >\n                                    All Day Task ?\n                                </Checkbox>\n                            </GridItem>\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Start Date<Text color={\"red\"}>*</Text>\n                                </FormLabel>\n                                <Input\n                                    type={values?.allDay ? 'date' : 'datetime-local'}\n                                    fontSize='sm'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    min={values?.allDay ? dayjs(today).format('YYYY-MM-DD') : dayjs(todayTime).format('YYYY-MM-DD HH:mm')}\n                                    value={values?.allDay ? values?.start && dayjs(values?.start).format('YYYY-MM-DD') || null : values?.start && dayjs(values?.start).format('YYYY-MM-DD HH:mm') || null}\n                                    name=\"start\"\n                                    fontWeight='500'\n                                    borderColor={errors?.start && touched?.start ? \"red.300\" : null}\n                                />\n                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.start && touched.start && errors.start}</Text>\n                            </GridItem>\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    End Date\n                                </FormLabel>\n                                <Input\n                                    type={values?.allDay ? 'date' : 'datetime-local'}\n                                    min={values.start}\n                                    fontSize='sm'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values?.allDay ? values?.end && dayjs(values?.end).format('YYYY-MM-DD') || null : values?.end && dayjs(values?.end).format('YYYY-MM-DD HH:mm') || null}\n                                    name=\"end\"\n                                    fontWeight='500'\n                                    borderColor={errors?.end && touched?.end ? \"red.300\" : null}\n                                />\n                                <Text mb='10px' color={'red'}> {errors.end && touched.end && errors.end}</Text>\n                            </GridItem>\n                            <GridItem colSpan={{ base: 12, sm: 4 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Background-Color\n                                </FormLabel>\n                                <Input\n                                    type='color'\n                                    fontSize='sm'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.backgroundColor}\n                                    name=\"backgroundColor\"\n                                    fontWeight='500'\n                                    borderColor={errors?.backgroundColor && touched?.backgroundColor ? \"red.300\" : null}\n                                />\n                                <Text mb='10px' color={'red'}> {errors.backgroundColor && touched.backgroundColor && errors.backgroundColor}</Text>\n                            </GridItem>\n                            <GridItem colSpan={{ base: 12, sm: 4 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Border-Color\n                                </FormLabel>\n                                <Input\n                                    fontSize='sm'\n                                    type='color'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.borderColor}\n                                    name=\"borderColor\"\n                                    placeholder='borderColor'\n                                    fontWeight='500'\n                                    borderColor={errors?.borderColor && touched?.borderColor ? \"red.300\" : null}\n                                />\n                                <Text mb='10px' color={'red'}> {errors.borderColor && touched.borderColor && errors.borderColor}</Text>\n                            </GridItem>\n                            <GridItem colSpan={{ base: 12, sm: 4 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Text-Color\n                                </FormLabel>\n                                <Input\n                                    fontSize='sm'\n                                    type='color'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.textColor}\n                                    name=\"textColor\"\n                                    placeholder='textColor'\n                                    fontWeight='500'\n                                    textColor={errors?.textColor && touched?.textColor ? \"red.300\" : null}\n                                />\n                                <Text mb='10px' color={'red'}> {errors.textColor && touched.textColor && errors.textColor}</Text>\n                            </GridItem>\n\n\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Url\n                                </FormLabel>\n                                <Input\n                                    fontSize='sm'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.url}\n                                    name=\"url\"\n                                    placeholder='Enter url'\n                                    fontWeight='500'\n                                    borderColor={errors?.url && touched?.url ? \"red.300\" : null}\n                                />\n                                <Text mb='10px' color={'red'}> {errors.url && touched.url && errors.url}</Text>\n                            </GridItem>\n                            <GridItem colSpan={{ base: 12, md: 6 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Status\n                                </FormLabel>\n                                <Select\n                                    onChange={(e) => setFieldValue(\"status\", e.target.value)}\n                                    value={values?.status}\n                                    style={{ fontSize: \"14px\" }}>\n                                    <option value='todo'>Todo</option>\n                                    <option value='onHold'>On Hold</option>\n                                    <option value='pending'>Pending</option>\n                                    <option value='inProgress'>In Progress</option>\n                                    <option value='completed'>Completed</option>\n                                </Select>\n                            </GridItem>\n                            <GridItem colSpan={{ base: 12 }} >\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Notes\n                                </FormLabel>\n                                <Textarea\n                                    resize={'none'}\n                                    fontSize='sm'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.notes}\n                                    name=\"notes\"\n                                    placeholder='Notes'\n                                    fontWeight='500'\n                                    borderColor={errors?.notes && touched?.notes ? \"red.300\" : null}\n                                />\n                                <Text mb='10px' color={'red'}> {errors.notes && touched.notes && errors.notes}</Text>\n                            </GridItem>\n                        </Grid>\n                    }\n                </ModalBody>\n                <ModalFooter>\n                    <Button size=\"sm\" variant='brand' onClick={handleSubmit}>{userAction === \"add\" ? \"Save\" : \"Update\"}</Button>\n                    <Button type=\"reset\" sx={{\n                        marginLeft: 2,\n                        textTransform: \"capitalize\",\n                    }} variant=\"outline\"\n                        colorScheme=\"red\" size=\"sm\" ml={2} onClick={() => { onClose(false); resetForm(); }}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal >\n    )\n}\n\nexport default AddEdit\n","import {\n  Box, Checkbox,\n  Flex, Table,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n  useColorModeValue\n} from \"@chakra-ui/react\";\nimport { useMemo, useState } from \"react\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport { GrFormNext, GrFormPrevious } from \"react-icons/gr\";\n\n// Custom components\nimport Card from \"components/card/Card\";\nimport { Link } from \"react-router-dom\";\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\nimport Pagination from \"components/pagination/Pagination\";\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\n\nexport default function ContactTable(props) {\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\n\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const data = useMemo(() => tableData, [tableData]);\n  const user = JSON.parse(localStorage.getItem(\"user\"))\n  const [gopageValue, setGopageValue] = useState()\n\n  const tableInstance = useTable(\n    {\n      columns, data,\n      initialState: { pageIndex: 0 }\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize }\n  } = tableInstance;\n\n  if (pageOptions.length < gopageValue) {\n    setGopageValue(pageOptions.length)\n  }\n\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n\n  const handleCheckboxChange = (event, value) => {\n    if (type === \"multi\") {\n      if (event.target.checked) {\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\n      } else {\n        setSelectedValues((prevSelectedValues) =>\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\n        );\n      }\n    } else {\n      if (event.target.checked) {\n        setSelectedValues(value);\n      } else {\n        setSelectedValues(null);\n      }\n    }\n  };\n\n\n  return (\n    <Card\n      direction='column'\n      w='100%'\n      px='0px'\n      style={{ border: '1px solid gray.200' }}\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\n        <Text\n          color={textColor}\n          fontSize='22px'\n          fontWeight='700'\n          lineHeight='100%'>\n          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)\n        </Text>\n      </Flex>\n      <Box overflowY={'auto'} className=\"table-container-property\" >\n        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\n          <Thead zIndex={1}>\n            {headerGroups?.map((headerGroup, index) => (\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\n                {headerGroup.headers.map((column, index) => (\n\n                  <Th\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\n                    pe=\"10px\"\n                    key={index}\n                    borderColor={borderColor}\n                  >\n                    <Flex\n                      align=\"center\"\n                      justifyContent={column.center ? \"center\" : \"start\"}\n                      fontSize={{ sm: \"14px\", lg: \"16px\" }}\n                      color=\" secondaryGray.900\"\n                    >\n                      <span style={{ textTransform: \"capitalize\", marginRight: \"8px\" }}>\n                        {column.render(\"Header\")}\n                      </span>\n\n                      {column.isSortable !== false && (\n                        <span>\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\n                        </span>\n                      )}\n                    </Flex>\n                  </Th>\n                ))}\n              </Tr>\n            ))}\n          </Thead>\n          <Tbody  {...getTableBodyProps()}>\n            {data?.length === 0 && (\n              <Tr>\n                <Td colSpan={columns.length}>\n                  <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                    -- No Data Found --\n                  </Text>\n                </Td>\n              </Tr>\n            )}\n            {page?.map((row, index) => {\n              prepareRow(row);\n              return (\n                <Tr {...row?.getRowProps()} key={index}>\n                  {row?.cells?.map((cell, index) => {\n                    let data = \"\";\n                    if (cell?.column.Header === \"#\") {\n                      data = (\n                        <Flex align=\"center\">\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                            {cell?.row?.index + 1}\n                          </Text>\n                        </Flex>\n                      );\n                    } else if (cell?.column.Header === \"title\") {\n                      data = (\n                        <Text\n                          me=\"10px\"\n                          color={textColor}\n                          fontSize=\"sm\"\n                          fontWeight=\"700\"\n                        >\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"first Name\") {\n                      data = (\n                        // <Link to={`/contactView/${cell?.row?.original._id}`}>\n                        <Text\n                          me=\"10px\"\n                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\n                          color={textColor}\n                          fontSize=\"sm\"\n                          fontWeight=\"700\"\n                        >\n                          {cell?.value}\n                        </Text>\n                        // </Link>\n                      );\n                    } else if (cell?.column.Header === \"last Name\") {\n                      data = (\n                        <Text\n                          me=\"10px\"\n                          color={textColor}\n                          fontSize=\"sm\"\n                          fontWeight=\"700\"\n                        >\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"phone Number\") {\n                      data = (\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\n                          color={textColor}>\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"Email Address\") {\n                      data = (\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\n                          color={textColor}>\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"physical Address\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"mailing Address\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"Contact Method\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    }\n                    return (\n                      <Td\n                        {...cell?.getCellProps()}\n                        key={index}\n                        fontSize={{ sm: \"14px\" }}\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                        borderColor='transparent'>\n                        {data}\n                      </Td>\n                    );\n                  })}\n                </Tr>\n              );\n            })}\n          </Tbody>\n        </Table>\n      </Box>\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\n\n    </Card>\n  );\n}\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport ContactTable from './Contact.js'\nimport Spinner from 'components/spinner/Spinner'\nimport { GiClick } from \"react-icons/gi\";\nimport CommonCheckTable from 'components/reactTable/checktable.js';\nimport { fetchContactCustomFiled } from '../../redux/slices/contactCustomFiledSlice.js';\nimport { fetchContactData } from '../../redux/slices/contactSlice.js';\nimport { useDispatch } from 'react-redux';\n\nconst ContactModel = (props) => {\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\n    const [selectedValues, setSelectedValues] = useState();\n    const [contactData, setContactData] = useState([]);\n    const [isLoding, setIsLoding] = useState(false)\n    const [columns, setColumns] = useState([]);\n    const dispatch = useDispatch();\n\n    const handleSubmit = async () => {\n        try {\n            setIsLoding(true)\n            setFieldValue(fieldName, selectedValues)\n            onClose()\n        }\n        catch (e) {\n            console.log(e)\n        }\n        finally {\n            setIsLoding(false)\n        }\n    }\n    const fetchCustomDataFields = async () => {\n        setIsLoding(true);\n        const result = await dispatch(fetchContactCustomFiled());\n        setContactData(result?.payload?.data);\n\n        const tempTableColumns = [\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\n            ...(result?.payload?.data?.[0]?.fields || [])\n                .filter(field => field?.isTableField === true)\n                .map(field => ({ Header: field?.label, accessor: field?.name }))\n        ];\n\n        setColumns(tempTableColumns);\n        setIsLoding(false);\n    };\n    useEffect(async () => {\n        await dispatch(fetchContactData())\n        fetchCustomDataFields();\n    }, []);\n    return (\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Select Contact</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    {isLoding ?\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\n                            <Spinner />\n                        </Flex>\n                        :\n                        <CommonCheckTable\n                            title={'Contacts'}\n                            isLoding={isLoding}\n                            columnData={columns ?? []}\n                            // dataColumn={columns ?? []}\n                            allData={data ?? []}\n                            tableData={data}\n                            tableCustomFields={contactData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\n                            AdvanceSearch={() => \"\"}\n                            ManageGrid={false}\n                            deleteMany={false}\n                            selectedValues={selectedValues}\n                            setSelectedValues={setSelectedValues}\n                            selectType=\"single\"\n                            customSearch={false}\n                        />\n                    }\n                </ModalBody>\n                <ModalFooter>\n                    <Button variant='brand' size='sm' me={2} onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n\n    )\n}\n\nexport default ContactModel\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport Spinner from 'components/spinner/Spinner'\nimport { GiClick } from \"react-icons/gi\";\nimport CommonCheckTable from 'components/reactTable/checktable';\nimport { fetchLeadCustomFiled } from '../../redux/slices/leadCustomFiledSlice';\nimport { useDispatch } from 'react-redux';\nimport { fetchLeadData } from '../../redux/slices/leadSlice';\n\nconst ContactModel = (props) => {\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\n    const title = \"Leads\";\n    const dispatch = useDispatch();\n\n    const [isLoding, setIsLoding] = useState(false);\n    const [columns, setColumns] = useState([]);\n    const [leadData, setLeadData] = useState([]);\n    const [selectedValues, setSelectedValues] = useState([]);\n\n    const handleSubmit = async () => {\n        try {\n            setIsLoding(true)\n            setFieldValue(fieldName, selectedValues)\n            onClose()\n        }\n        catch (e) {\n            console.log(e)\n        }\n        finally {\n            setIsLoding(false)\n        }\n    }\n\n    const fetchCustomDataFields = async () => {\n        setIsLoding(true);\n\n        const result = await dispatch(fetchLeadCustomFiled());\n        setLeadData(result?.payload?.data);\n\n        const tempTableColumns = [\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\n            {\n                Header: \"Status\", accessor: \"leadStatus\", isSortable: true, center: true,\n                cell: ({ row }) => (\n                    row.original.leadStatus\n                )\n            },\n            ...(result?.payload?.data?.[0]?.fields?.filter((field) => field?.isTableField === true)?.map((field) => (field?.name !== \"leadStatus\" && { Header: field?.label, accessor: field?.name })) || []),\n        ];\n\n        setColumns(tempTableColumns);\n        setIsLoding(false);\n    }\n\n    useEffect(() => {\n        dispatch(fetchLeadData())\n        fetchCustomDataFields();\n    }, [])\n\n    return (\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Select Lead</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    {isLoding ?\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\n                            <Spinner />\n                        </Flex> :\n                        <CommonCheckTable\n                            title={title}\n                            isLoding={isLoding}\n                            columnData={columns ?? []}\n                            // dataColumn={columns ?? []}\n                            allData={data ?? []}\n                            tableData={data}\n                            tableCustomFields={leadData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\n                            AdvanceSearch={() => \"\"}\n                            ManageGrid={false}\n                            deleteMany={false}\n                            selectedValues={selectedValues}\n                            setSelectedValues={setSelectedValues}\n                            selectType=\"single\"\n                            customSearch={false}\n                        />\n                    }\n                </ModalBody>\n                <ModalFooter>\n                    <Button variant='brand' size='sm' me={2} disabled={isLoding ? true : false} leftIcon={<GiClick />} onClick={handleSubmit}> {isLoding ? <Spinner /> : 'Select'}</Button>\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n\n    )\n}\n\nexport default ContactModel\n"],"names":["props","onClose","isOpen","fetchData","userAction","setAction","id","view","data","isChecked","setIsChecked","useState","userId","JSON","parse","localStorage","getItem","_id","assignToLeadData","setAssignToLeadData","assignToContactData","setAssignToContactData","user","isLoding","setIsLoding","contactModelOpen","setContactModel","leadModelOpen","setLeadModel","leadData","useSelector","state","_state$leadData","today","Date","toISOString","split","todayTime","leadAccess","contactAccess","HasAccess","contactData","_state$contactData","initialValues","title","category","leadContect","description","notes","assignTo","assignToLead","reminder","start","end","backgroundColor","borderColor","textColor","allDay","display","url","createBy","formik","useFormik","validationSchema","TaskSchema","enableReinitialize","onSubmit","values","_ref","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","moment","format","postApi","status","e","console","log","putApi","concat","pre","fetchTaskData","_result$data","_result$data2","_result$data3","_result$data4","_result$data5","_result$data6","_result$data7","_result$data8","_result$data9","_result$data0","_result$data1","_result$data10","_result$data11","_result$data12","_result$data13","_result$data14","result","getApi","useEffect","date","length","_result","role","_result2","_jsxs","Modal","size","children","from","_jsx","ModalOverlay","ModalContent","overflowY","height","ModalHeader","justifyContent","IconButton","onClick","icon","CloseIcon","ModalBody","ContactModel","fieldName","LeadModel","Flex","alignItems","width","Spinner","Grid","templateColumns","gap","GridItem","colSpan","base","md","FormLabel","ms","fontSize","fontWeight","mb","Text","color","Input","onChange","onBlur","value","name","placeholder","RadioGroup","Stack","direction","Radio","_Fragment","create","Select","undefined","map","item","firstName","lastName","leadName","ml","LiaMousePointerSolid","Checkbox","type","min","dayjs","sm","target","style","Textarea","resize","ModalFooter","Button","variant","sx","marginLeft","textTransform","colorScheme","ContactTable","columnsData","tableData","selectedValues","setSelectedValues","columns","useMemo","gopageValue","setGopageValue","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","pageSize","useColorModeValue","handleCheckboxChange","event","checked","prevSelectedValues","filter","selectedValue","Card","w","px","border","overflowX","lg","justify","align","lineHeight","CountUpComponent","targetNumber","Box","className","Table","_objectSpread","Thead","zIndex","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","isSortable","getSortByToggleProps","pe","center","marginRight","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","textAlign","row","_row$cells","getRowProps","cells","cell","_cell$row","Header","includes","me","getCellProps","minW","Pagination","_contactData$","_contactData$$fields","setContactData","setColumns","dispatch","useDispatch","fetchContactData","_result$payload","_result$payload2","_result$payload2$data","_result$payload2$data2","fetchContactCustomFiled","payload","tempTableColumns","accessor","fields","field","isTableField","label","fetchCustomDataFields","ModalCloseButton","CommonCheckTable","columnData","allData","tableCustomFields","AdvanceSearch","ManageGrid","deleteMany","selectType","customSearch","disabled","leftIcon","GiClick","_leadData$","_leadData$$fields","setLeadData","fetchLeadData","_result$payload2$data3","_result$payload2$data4","fetchLeadCustomFiled","original","leadStatus"],"sourceRoot":""}