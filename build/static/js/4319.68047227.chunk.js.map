{"version":3,"file":"static/js/4319.68047227.chunk.js","mappings":"2OAae,SAASA,EAAOC,GAC7B,MAAM,KAAEC,EAAI,MAAEC,EAAK,MAAEC,GAAmBH,EAElCI,IAF6BC,EAAAA,EAAAA,GAAKL,EAAKM,IAEpBC,EAAAA,EAAAA,IAAkB,oBAAqB,UAC1DC,GAAaD,EAAAA,EAAAA,IAAkB,YAAa,SAElD,OACEE,EAAAA,EAAAA,MAACC,EAAAA,KAAI,CAACC,gBAAgB,kBAAkBC,GAAI,EAAGC,IAAK,EAAEC,SAAA,EACpDC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,GAAI,MAAO,GAAIJ,UACxCC,EAAAA,EAAAA,KAACI,EAAAA,EAAQ,CACPC,EAAG,CAAEF,KAAM,OAAQ,MAAO,SAC1BG,GAAG,OACHC,KAAM,IACNC,OAAQ,OACRC,aAAcxB,EAAMwB,aACpBC,SACEhB,EAAAA,EAAAA,MAACiB,EAAAA,IAAG,CAAAZ,SAAA,EACFC,EAAAA,EAAAA,KAACY,EAAAA,GAAI,CAACC,GAAIC,EAAAA,IAAUT,EAAE,OAAOU,EAAE,OAAOC,MAAOvB,KAC7CO,EAAAA,EAAAA,KAACiB,EAAAA,KAAI,CAACC,QAAQ,SAASC,GAAG,OAAOtB,GAAG,OAAME,UACxCC,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CAACC,SAAS,KAAKC,WAAW,MAAMN,MAAOvB,EAAWM,SAAC,oBAI1DC,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CAACC,SAAS,KAAKC,WAAW,MAAMN,MAAM,oBAAmBjB,SAC3DX,EAAQ,IAAKM,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CAACC,SAAS,KAAKC,WAAW,MAAMN,MAAM,oBAAmBjB,SAAA,CAAC,oBACzDX,eAO9BY,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,GAAI,MAAO,GAAIJ,UACxCL,EAAAA,EAAAA,MAACuB,EAAAA,KAAI,CAACM,UAAU,SAAQxB,SAAA,EACtBC,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CACHJ,MAAO3B,EACPiC,WAAW,OACXE,UAAU,QACVH,SAAS,MACTI,GAAI,CAAEtB,KAAM,OAAQ,MAAO,QAASJ,SAAC,kBAGvCC,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CACHJ,MAtCiB,WAuCjBK,SAAS,KACTK,GAAI,CAAEvB,KAAM,OAAQ,MAAO,QAC3BgB,GAAG,OACHK,UAAU,QAAOzB,SAAC,6GAO9B,C,6LChEA,MA0CA,EA1CgBd,IAuBRe,EAAAA,EAAAA,KAAA,OAAAD,UACIL,EAAAA,EAAAA,MAACiC,EAAAA,GAAK,CAACC,QAAS3C,EAAM2C,QAASC,OAAQ5C,EAAM4C,OAAQC,YAAU,EAAA/B,SAAA,EAC3DC,EAAAA,EAAAA,KAAC+B,EAAAA,GAAY,KACbrC,EAAAA,EAAAA,MAACsC,EAAAA,GAAY,CAAAjC,SAAA,EACTL,EAAAA,EAAAA,MAACuC,EAAAA,GAAW,CAAAlC,SAAA,CAAC,kBAAiC,QAAjBd,EAAMiD,OAAmB,GAAK,QAC3DlC,EAAAA,EAAAA,KAACmC,EAAAA,GAAgB,KACjBzC,EAAAA,EAAAA,MAAC0C,EAAAA,GAAS,CAAArC,SAAA,CAAC,2CACmD,QAAjBd,EAAMiD,OAAmB,GAAK,IAAI,SAE/ExC,EAAAA,EAAAA,MAAC2C,EAAAA,GAAW,CAAAtC,SAAA,EACRC,EAAAA,EAAAA,KAACsC,EAAAA,OAAM,CAACC,KAAK,KAAKC,YAAY,MAAMC,GAAI,EAAGC,QAhCrCC,UACtB,GAAqB,QAAjB1D,EAAMiD,OACNjD,EAAM2D,WAAW3D,EAAM4D,IACvB5D,EAAM2C,SAAQ,QACX,GAAqB,SAAjB3C,EAAMiD,OACb,IAE4B,aADHY,EAAAA,EAAAA,IAAc7D,EAAM8D,IAAK9D,EAAM+D,OACvCC,SACThE,EAAMiE,kBAAkB,IACxBjE,EAAM2C,SAAQ,GAEtB,CAAE,MAAOuB,GACLC,QAAQC,IAAIF,EAChB,CACJ,EAkBsFpD,SAAC,SACvEC,EAAAA,EAAAA,KAACsC,EAAAA,OAAM,CAACC,KAAK,KAAKe,QAAQ,UAAUZ,QAhBpCa,KAChBtE,EAAM2C,SAAQ,EAAM,EAeqD7B,SAAC,kB,2FC3BlF,MAoKA,EApKcd,IACV,MAAM,gBAAEuE,GAAoBvE,GACrBwE,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCX,EAAMY,IAAWD,EAAAA,EAAAA,UAAS,KAC1BE,EAAkBC,IAAmBH,EAAAA,EAAAA,WAAS,IAC9CI,EAAeC,IAAgBL,EAAAA,EAAAA,WAAS,GACzCM,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SAQvCC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAPkB,CAClBC,SAAU,GACVC,YAAa,GACbC,SAAU,IAKVC,SAAUA,CAACC,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,EAC5BE,IACAD,GAAW,KAGb,OAAEE,EAAM,QAAEC,EAAO,OAAEL,EAAM,WAAEM,EAAU,aAAEC,EAAY,aAAEC,EAAY,cAAEC,EAAa,UAAEP,GAAcT,EAEhGU,EAAcrC,UAChB,IACIe,GAAY,GACZ,IAAIV,EAAO6B,EAAOH,YAAc,CAAEA,YAAaG,EAAOH,aAAgB,CAAEC,SAAUE,EAAOF,UACrFY,QAAiBC,EAAAA,EAAAA,IAAQ,8BAADC,OAA+BxG,EAAM4D,IAAMG,GAI/D,IAAD0C,EAHP,GAAIH,GAAgC,MAApBA,EAAStC,OACrBO,GAAiBmC,IAASA,IAC1B1G,EAAM2C,eAENgE,EAAAA,GAAMzC,MAA4B,QAAvBuC,EAACH,EAASA,SAASvC,YAAI,IAAA0C,OAAA,EAAtBA,EAAwBG,QAE5C,CAAE,MAAO1C,GACLC,QAAQC,IAAIF,EAChB,CAAC,QAEGO,GAAY,EAChB,GA6BJ,OAJAoC,EAAAA,EAAAA,YAAU,KAlBQnD,WACd,GAAwB,YAApBkC,EAAOJ,SAAwB,CAC/B,IAAIsB,QAAeC,EAAAA,EAAAA,IAAqB,eAAd/B,EAAKgC,KAAwB,eAAc,yBAAAR,OAA4BxB,EAAKiC,MACtGrB,EAAOsB,SAAiB,OAANJ,QAAM,IAANA,OAAM,EAANA,EAAQG,IAC1BtC,GAAQwC,IAAQ,IAAAC,EAAA,MAAI,KAEN,OAANN,QAAM,IAANA,GAAY,QAANM,EAANN,EAAQ/C,YAAI,IAAAqD,OAAN,EAANA,EAAcC,KAAIC,IAAI,CAAOC,MAAOD,EAAKE,UAAY,IAAMF,EAAKG,SAAUC,MAAOJ,EAAKL,UAAW,GACxG,GACL,MAAO,GAAwB,SAApBrB,EAAOJ,SAAqB,CACnC,IAAIsB,QAAeC,EAAAA,EAAAA,IAAqB,eAAd/B,EAAKgC,KAAwB,YAAW,sBAAAR,OAAyBxB,EAAKiC,MAChGrB,EAAOsB,SAAiB,OAANJ,QAAM,IAANA,OAAM,EAANA,EAAQG,IAC1BtC,GAAQwC,IAAQ,IAAAQ,EAAA,MAAI,KAEN,OAANb,QAAM,IAANA,GAAY,QAANa,EAANb,EAAQ/C,YAAI,IAAA4D,OAAN,EAANA,EAAcN,KAAIC,IAAI,CAAOC,MAAOD,EAAKM,SAAUF,MAAOJ,EAAKL,UAAW,GACjF,GACL,GAIAY,EAAW,GACZ,CAACjC,EAAOJ,YAGP/E,EAAAA,EAAAA,MAAAqH,EAAAA,SAAA,CAAAhH,SAAA,EAEIL,EAAAA,EAAAA,MAACiC,EAAAA,GAAK,CAACC,QAAS3C,EAAM2C,QAASC,OAAQ5C,EAAM4C,OAAO9B,SAAA,EAChDC,EAAAA,EAAAA,KAAC+B,EAAAA,GAAY,KACbrC,EAAAA,EAAAA,MAACsC,EAAAA,GAAY,CAAAjC,SAAA,EACTC,EAAAA,EAAAA,KAACiC,EAAAA,GAAW,CAAAlC,SAAC,wBACbC,EAAAA,EAAAA,KAACmC,EAAAA,GAAgB,KACjBnC,EAAAA,EAAAA,KAACoC,EAAAA,GAAS,CAAArC,UAENL,EAAAA,EAAAA,MAACC,EAAAA,KAAI,CAACC,gBAAgB,kBAAkBE,IAAK,EAAEC,SAAA,EAE3CL,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,IAAKJ,SAAA,EAC5BC,EAAAA,EAAAA,KAACgH,EAAAA,UAAS,CAACC,QAAQ,OAAOC,GAAG,MAAM7F,SAAS,KAAKC,WAAW,MAAMzB,GAAG,MAAKE,SAAC,eAG3EC,EAAAA,EAAAA,KAACmH,EAAAA,GAAU,CAACC,SAAWC,IAAQtC,IAAaO,EAAc,WAAY+B,EAAE,EAAIV,MAAO9B,EAAOJ,SAAS1E,UAC/FL,EAAAA,EAAAA,MAAC4H,EAAAA,MAAK,CAAC/F,UAAU,MAAKxB,SAAA,EAClBC,EAAAA,EAAAA,KAACuH,EAAAA,GAAK,CAACZ,MAAM,UAAS5G,SAAC,aACvBC,EAAAA,EAAAA,KAACuH,EAAAA,GAAK,CAACZ,MAAM,OAAM5G,SAAC,eAG5BL,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CAACvB,GAAG,OAAOmB,MAAO,MAAMjB,SAAA,CAAC,IAAEkF,EAAOR,UAAYS,EAAQT,UAAYQ,EAAOR,eAG7D,YAApBI,EAAOJ,UACJ/E,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,IAAKJ,SAAA,EAC5BC,EAAAA,EAAAA,KAACgH,EAAAA,UAAS,CAACC,QAAQ,OAAOC,GAAG,MAAM7F,SAAS,KAAKC,WAAW,MAAMzB,GAAG,MAAKE,SAAC,kBAI3EL,EAAAA,EAAAA,MAACuB,EAAAA,KAAI,CAAAlB,SAAA,EAEDC,EAAAA,EAAAA,KAACwH,EAAAA,GAAM,CACHb,MAAO9B,EAAOH,YACd+C,KAAK,cACLL,SAAUhC,EACVvF,GAAIoF,EAAOP,aAAeQ,EAAQR,iBAAcgD,EAAY,OAC5DpG,WAAW,MACXqG,YAAY,eACZC,YAAa3C,EAAOP,aAAeQ,EAAQR,YAAc,UAAY,KAAK3E,SAErE,OAAJiD,QAAI,IAAJA,OAAI,EAAJA,EAAMsD,KAAKC,IACDvG,EAAAA,EAAAA,KAAA,UAAQ2G,MAAOJ,EAAKI,MAAM5G,SAAuC,YAApB8E,EAAOJ,UAAsB,GAAAgB,OAAOc,EAAKC,QAAtDD,EAAKI,YAGpD3G,EAAAA,EAAAA,KAAC6H,EAAAA,WAAU,CAACnF,QAASA,IAAMoB,GAAgB,GAAOgE,GAAI,EAAGzG,SAAS,OAAO0G,MAAM/H,EAAAA,EAAAA,KAACgI,EAAAA,IAAoB,OACpGtI,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CAACvB,GAAG,OAAOmB,MAAO,MAAMjB,SAAA,CAAC,IAAEkF,EAAOP,aAAeQ,EAAQR,aAAeO,EAAOP,qBAGtE,SAApBG,EAAOJ,WACT/E,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,IAAKJ,SAAA,EAC5BC,EAAAA,EAAAA,KAACgH,EAAAA,UAAS,CAACC,QAAQ,OAAOC,GAAG,MAAM7F,SAAS,KAAKC,WAAW,MAAMzB,GAAG,MAAKE,SAAC,eAI3EL,EAAAA,EAAAA,MAACuB,EAAAA,KAAI,CAAAlB,SAAA,EAEDC,EAAAA,EAAAA,KAACwH,EAAAA,GAAM,CACHb,MAAO9B,EAAOF,SACd8C,KAAK,WACLL,SAAUhC,EACVvF,GAAIoF,EAAON,UAAYO,EAAQP,cAAW+C,EAAY,OACtDpG,WAAW,MACXqG,YAAY,YACZC,YAAa3C,EAAON,UAAYO,EAAQP,SAAW,UAAY,KAAK5E,SAE/D,OAAJiD,QAAI,IAAJA,OAAI,EAAJA,EAAMsD,KAAKC,IACDvG,EAAAA,EAAAA,KAAA,UAAQ2G,MAAOJ,EAAKI,MAAM5G,SAAuC,SAApB8E,EAAOJ,UAAmB,GAAAgB,OAAOc,EAAKC,QAAnDD,EAAKI,YAGpD3G,EAAAA,EAAAA,KAAC6H,EAAAA,WAAU,CAACnF,QAASA,IAAMoB,GAAgB,GAAOgE,GAAI,EAAGzG,SAAS,OAAO0G,MAAM/H,EAAAA,EAAAA,KAACgI,EAAAA,IAAoB,OACpGtI,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CAACvB,GAAG,OAAOmB,MAAO,MAAMjB,SAAA,CAAC,IAAEkF,EAAON,UAAYO,EAAQP,UAAYM,EAAON,gBAElFjF,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CAACvB,GAAG,OAAOmB,MAAO,MAAMjB,SAAA,CAAC,IAAEkF,EAAON,UAAYO,EAAQP,UAAYM,EAAON,qBAS9FjF,EAAAA,EAAAA,MAAC2C,EAAAA,GAAW,CAAAtC,SAAA,EACRC,EAAAA,EAAAA,KAACsC,EAAAA,OAAM,CAACC,KAAK,KAAKC,YAAY,QAAQyF,WAAWjI,EAAAA,EAAAA,KAACkI,EAAAA,SAAQ,IAAKzF,GAAI,EAAGC,QAASsC,EAAYjF,SAAC,UAC5FC,EAAAA,EAAAA,KAACsC,EAAAA,OAAM,CAACC,KAAK,KAAKe,QAAQ,UAAUd,YAAY,MAAME,QAASA,KA9G/EzD,EAAM2C,SAAQ,GA8GwFmD,GAAW,EAAGhF,SAAC,qBAIjHC,EAAAA,EAAAA,KAACmI,EAAAA,EAAY,CAACnF,KAAMA,EAAMnB,OAAQgC,EAAkBjC,QAASkC,EAAiBsE,UAAU,cAAc9C,cAAeA,KAErHtF,EAAAA,EAAAA,KAACqI,EAAAA,EAAS,CAACrF,KAAMA,EAAMnB,OAAQkC,EAAenC,QAASoC,EAAcoE,UAAU,WAAW9C,cAAeA,MAC1G,E,eC9JX,MA8EA,EA9EuBR,IAA0F,IAAzF,KAAE9B,EAAI,WAAEJ,EAAU,KAAE2D,EAAI,SAAE+B,EAAQ,KAAEb,EAAI,OAAEc,EAAM,SAAExI,EAAQ,gBAAEyD,EAAe,KAAEgF,GAAM1D,EACvG,MAAOjD,EAAQ4G,IAAa9E,EAAAA,EAAAA,WAAS,IAE9B+E,EAAaC,IAAahF,EAAAA,EAAAA,WAAS,IACnCiF,EAAWC,IAAgBlF,EAAAA,EAAAA,WAAS,IACpCd,EAAIiG,IAASnF,EAAAA,EAAAA,WAAS,GACvBoF,GAAWC,EAAAA,EAAAA,MAKXC,GAAYV,KAAYxI,EAejBmE,KAAKC,MAAMC,aAAaC,QAAQ,SAO7C,OACI3E,EAAAA,EAAAA,MAACwJ,EAAAA,KAAI,CAACC,MAAO,OAAOpJ,SAAA,EAChBC,EAAAA,EAAAA,KAACoJ,EAAAA,SAAQ,CAACC,WAAY,SAAUpC,QAAS,OAAOlH,UAC5CL,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CAACiI,WAAY,SAAUC,eAAgB,gBAAiBrC,QAAS,OAAQkC,MAAO,OAAQzG,QAASuG,EA5B7FM,KACjBd,GAAW5G,EAAO,OA2BsH6F,EAAW8B,OAAQ,CAAEC,OAAQ,UAAWC,eAAgB,QAAS3J,SAAA,EAC7LL,EAAAA,EAAAA,MAACuB,EAAAA,KAAI,CAACkI,MAAO,MAAOE,WAAY,SAAStJ,SAAA,EACrCC,EAAAA,EAAAA,KAAC2J,EAAAA,SAAQ,CAAC9I,GAAI0H,EAASqB,EAAAA,IAASC,EAAAA,MAC/BZ,IAAapH,GAAS7B,EAAAA,EAAAA,KAAC8J,EAAAA,IAAa,KAAM9J,EAAAA,EAAAA,KAAC+J,EAAAA,IAAc,KACzDtC,KAEA,OAAJlB,QAAI,IAAJA,GAAAA,EAAMyD,cAAetK,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CAAArB,SAAA,CAAC,IAAM,OAAJwG,QAAI,IAAJA,OAAI,EAAJA,EAAMyD,aAAa,QAAY,MAC3Df,IACEjJ,EAAAA,EAAAA,KAACiB,EAAAA,KAAI,CAACqI,eAAgB,QAASH,MAAO,OAAOpJ,UACzCL,EAAAA,EAAAA,MAACuK,EAAAA,GAAI,CAACC,QAAM,EAAAnK,SAAA,EACRC,EAAAA,EAAAA,KAACmK,EAAAA,GAAU,CAAApK,UAACC,EAAAA,EAAAA,KAACoK,EAAAA,IAAW,OACxB1K,EAAAA,EAAAA,MAAC2K,EAAAA,GAAQ,CAACC,SAAU,WAAYC,OAAQ,EAAGC,GAAI,QAASC,KAAM,cAAc1K,SAAA,EACtEyI,GAAY,OAAJxF,QAAI,IAAJA,GAAAA,EAAM0B,aACZ1E,EAAAA,EAAAA,KAAC0K,EAAAA,GAAQ,CAACC,GAAI,EAAGtK,EAAG,QAASqC,QAASA,IAAMqG,EAAS,gBAADtD,OAAqB,OAAJzC,QAAI,IAAJA,OAAI,EAAJA,EAAM0B,cAAgBqD,MAAM/H,EAAAA,EAAAA,KAAC4K,EAAAA,IAAY,CAACvJ,SAAU,KAAOtB,SAAC,oBAC9HyI,IAAY,OAAJxF,QAAI,IAAJA,OAAI,EAAJA,EAAM2B,YAAY3E,EAAAA,EAAAA,KAAC0K,EAAAA,GAAQ,CAACC,GAAI,EAAGtK,EAAG,QAASqC,QAASA,IAAMqG,EAAS,aAADtD,OAAkB,OAAJzC,QAAI,IAAJA,OAAI,EAAJA,EAAM2B,WAAaoD,MAAM/H,EAAAA,EAAAA,KAAC6K,EAAAA,IAAa,CAACxJ,SAAU,KAAOtB,SAAC,iBAE3JyI,IAAQxI,EAAAA,EAAAA,KAAC0K,EAAAA,GAAQ,CAACC,GAAI,GAAItB,WAAY,QAASrI,MAAO,OAAQ0B,QAASA,IA9BhFM,KACrB6F,GAAa,GACbC,EAAM9F,EAAK,EA4BgG8H,CAAoB,OAAJ9H,QAAI,IAAJA,OAAI,EAAJA,EAAMkD,KAAM6B,MAAM/H,EAAAA,EAAAA,KAACkI,EAAAA,SAAQ,CAAC7G,SAAU,KAAOtB,SAAC,SAxB7K,SAAoBgD,GAChB,MACMgI,EAAehI,EAAIiI,UAAUjI,EAAIkI,YAAY,MAAMC,cACzD,MAFwB,CAAC,OAAQ,QAAS,OAAQ,OAAQ,QAEnCC,SAASJ,EACpC,CAqBiCK,CAAe,OAAJpI,QAAI,IAAJA,OAAI,EAAJA,EAAMqI,OAAQrL,EAAAA,EAAAA,KAAC0K,EAAAA,GAAQ,CAACrB,WAAY,QAASsB,GAAI,GAAI3J,MAAO,QAAS0B,QAASA,IAAM4I,OAAOC,KAAS,OAAJvI,QAAI,IAAJA,OAAI,EAAJA,EAAMqI,KAAMtD,MAAM/H,EAAAA,EAAAA,KAACwL,EAAAA,SAAQ,CAACnK,SAAU,KAAOtB,SAAC,UAC1JC,EAAAA,EAAAA,KAAC0K,EAAAA,GAAQ,CAACC,GAAI,GAAItB,WAAY,QAAS3G,QAASA,IAzC3DM,KACjBsF,EAAStF,EAAK,EAwCoEgC,CAAgB,OAAJhC,QAAI,IAAJA,OAAI,EAAJA,EAAMkD,KAAM6B,MAAM/H,EAAAA,EAAAA,KAACyL,EAAAA,aAAY,CAACpK,SAAU,KAAOtB,SAAC,cAClHyI,IAAQxI,EAAAA,EAAAA,KAAC0K,EAAAA,GAAQ,CAACrB,WAAY,QAASsB,GAAI,GAAI3J,MAAO,MAAO0B,QAASA,IAtCpFM,KAChB2F,GAAU,GACVG,EAAM9F,EAAK,EAoC+F0I,CAAe,OAAJ1I,QAAI,IAAJA,OAAI,EAAJA,EAAMkD,KAAM6B,MAAM/H,EAAAA,EAAAA,KAAC2L,EAAAA,WAAU,CAACtK,SAAU,KAAOtB,SAAC,oBAKzJC,EAAAA,EAAAA,KAAC4L,EAAM,CAAC/J,OAAQ6G,EAAa9G,QAAS+G,EAAWzG,OAAO,MAAMU,WAAYA,EAAYC,GAAIA,KAC1F7C,EAAAA,EAAAA,KAAC6L,EAAS,CAAChK,OAAQ+G,EAAWpF,gBAAiBA,EAAiB5B,QAASiH,EAAchG,GAAIA,SAI/FoG,IACIjJ,EAAAA,EAAAA,KAAC8L,EAAAA,GAAQ,CAACC,GAAIlK,EAAQmK,gBAAc,EAAAjM,UAChCC,EAAAA,EAAAA,KAACkJ,EAAAA,KAAI,CAAC+C,UAAU,OAAOnE,GAAI,EAAE/H,SACxBA,QAKd,C,0KC1DA,SAASmM,EAAajN,GACnC,MAAM,YAAEkN,EAAW,UAAEC,EAAS,MAAEC,EAAK,KAAEC,EAAI,eAAEC,EAAc,kBAAErJ,GAAsBjE,EAE7EuN,GAAUC,EAAAA,EAAAA,UAAQ,IAAMN,GAAa,CAACA,IACtCnJ,GAAOyJ,EAAAA,EAAAA,UAAQ,IAAML,GAAW,CAACA,KAEhCM,EAAaC,IADPzI,KAAKC,MAAMC,aAAaC,QAAQ,UACPV,EAAAA,EAAAA,aAEhCiJ,GAAgBC,EAAAA,EAAAA,UACpB,CACEL,UAASxJ,OACT8J,aAAc,CAAEC,UAAW,IAE7BC,EAAAA,gBACAC,EAAAA,UACAC,EAAAA,gBAGI,cACJC,EAAa,kBACbC,EAAiB,aACjBC,EAAY,WACZC,EAAU,KACVC,EAAI,gBACJC,EAAe,YACfC,EAAW,YACXC,EAAW,UACXC,EAAS,SACTC,EAAQ,SACRC,EAAQ,aACRC,EAAY,YACZC,EACAC,OAAO,UAAEjB,EAAS,SAAEkB,IAClBrB,EAEAc,EAAYQ,OAASxB,GACvBC,EAAee,EAAYQ,QAG7B,MAAMC,GAAY3O,EAAAA,EAAAA,IAAkB,WAAY,SAC1CoI,GAAcpI,EAAAA,EAAAA,IAAkB,WAAY,kBAE5C4O,EAAuBA,CAACC,EAAO1H,KACtB,UAAT2F,EACE+B,EAAMC,OAAOC,QACfrL,GAAmBsL,GAAuB,IAAIA,EAAoB7H,KAElEzD,GAAmBsL,GACjBA,EAAmBC,QAAQC,GAAkBA,IAAkB/H,MAI/D0H,EAAMC,OAAOC,QACfrL,EAAkByD,GAElBzD,EAAkB,KAEtB,EAIF,OACExD,EAAAA,EAAAA,MAACiP,EAAAA,EAAI,CACHpN,UAAU,SACVlB,EAAE,OACFuO,GAAG,MACHC,MAAO,CAAEC,OAAQ,sBACjBC,UAAW,CAAEC,GAAI,SAAUC,GAAI,UAAWlP,SAAA,EAC1CC,EAAAA,EAAAA,KAACiB,EAAAA,KAAI,CAAC2N,GAAG,OAAO1N,QAAQ,gBAAgBrB,GAAG,OAAOqP,MAAM,SAAQnP,UAC9DL,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CACHJ,MAAOmN,EACP9M,SAAS,OACTC,WAAW,MACX6N,WAAW,OAAMpP,SAAA,CAChBsM,EAAM,OAAGrM,EAAAA,EAAAA,KAACoP,EAAAA,EAAgB,CAAoBC,aAAkB,OAAJrM,QAAI,IAAJA,OAAI,EAAJA,EAAMkL,QAA9B,OAAJlL,QAAI,IAAJA,OAAI,EAAJA,EAAMkL,QAAsC,UAGjFlO,EAAAA,EAAAA,KAACW,EAAAA,IAAG,CAAC2O,UAAW,OAAQC,UAAU,2BAA0BxP,UAC1DL,EAAAA,EAAAA,MAAC8P,EAAAA,IAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAMtC,KAAe,IAAE7J,QAAQ,SAAStC,MAAM,WAAWnB,GAAG,OAAME,SAAA,EACtEC,EAAAA,EAAAA,KAAC0P,EAAAA,GAAK,CAACC,OAAQ,EAAE5P,SACF,OAAZsN,QAAY,IAAZA,OAAY,EAAZA,EAAc/G,KAAI,CAACsJ,EAAaC,KAC/BC,EAAAA,EAAAA,eAACC,EAAAA,IAAEN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKG,EAAYI,uBAAqB,IAAEC,IAAKJ,IAC7CD,EAAYM,QAAQ5J,KAAI,CAAC6J,EAAQN,KAEhCC,EAAAA,EAAAA,eAACM,EAAAA,IAAEX,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACGU,EAAOE,gBAAqC,IAAtBF,EAAOG,YAAwBH,EAAOI,yBAAuB,IACvFC,GAAG,OACHP,IAAKJ,EACLjI,YAAaA,KAEblI,EAAAA,EAAAA,MAACuB,EAAAA,KAAI,CACHiO,MAAM,SACN5F,eAAgB6G,EAAOM,OAAS,SAAW,QAC3CpP,SAAU,CAAE2N,GAAI,OAAQC,GAAI,QAC5BjO,MAAM,qBAAoBjB,SAAA,EAE1BC,EAAAA,EAAAA,KAAA,QAAM6O,MAAO,CAAE6B,cAAe,aAAcC,YAAa,OAAQ5Q,SAC9DoQ,EAAOS,OAAO,aAGM,IAAtBT,EAAOG,aACNtQ,EAAAA,EAAAA,KAAA,QAAAD,SACGoQ,EAAOU,SAAYV,EAAOW,cAAe9Q,EAAAA,EAAAA,KAAC+Q,EAAAA,IAAU,KAAM/Q,EAAAA,EAAAA,KAACgR,EAAAA,IAAQ,KAAOhR,EAAAA,EAAAA,KAACiR,EAAAA,IAAM,kBASlGvR,EAAAA,EAAAA,MAACwR,EAAAA,IAAKzB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAMrC,KAAmB,IAAArN,SAAA,CACX,KAAb,OAAJiD,QAAI,IAAJA,OAAI,EAAJA,EAAMkL,UACLlO,EAAAA,EAAAA,KAAC+P,EAAAA,GAAE,CAAAhQ,UACDC,EAAAA,EAAAA,KAACmR,EAAAA,GAAE,CAACjR,QAASsM,EAAQ0B,OAAOnO,UAC1BC,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CAACI,UAAW,SAAU2H,MAAM,OAAOnI,MAAOmN,EAAW9M,SAAS,KAAKC,WAAW,MAAKvB,SAAC,4BAM1F,OAAJwN,QAAI,IAAJA,OAAI,EAAJA,EAAMjH,KAAI,CAAC8K,EAAKvB,KAAW,IAADwB,EAEzB,OADA/D,EAAW8D,IAETtB,EAAAA,EAAAA,eAACC,EAAAA,IAAEN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ,OAAH2B,QAAG,IAAHA,OAAG,EAAHA,EAAKE,eAAa,IAAErB,IAAKJ,IAC3B,OAAHuB,QAAG,IAAHA,GAAU,QAAPC,EAAHD,EAAKG,aAAK,IAAAF,OAAP,EAAHA,EAAY/K,KAAI,CAACkL,EAAM3B,KACtB,IAAI7M,EAAO,GACuB,IAADyO,EAAL,OAApB,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,OAAOuB,QACf1O,GACEtD,EAAAA,EAAAA,MAACuB,EAAAA,KAAI,CAACiO,MAAM,SAAQnP,SAAA,CACR,UAATuM,GAAmBtM,EAAAA,EAAAA,KAAC2R,EAAAA,GAAQ,CAACnP,YAAY,cAAcmE,MAAO4F,EAAgBqF,UAAWrF,EAAepB,SAAa,OAAJqG,QAAI,IAAJA,OAAI,EAAJA,EAAM7K,OAAQS,SAAWiH,GAAUD,EAAqBC,EAAW,OAAJmD,QAAI,IAAJA,OAAI,EAAJA,EAAM7K,OAAQrG,GAAG,UAChMN,EAAAA,EAAAA,KAAC2R,EAAAA,GAAQ,CAACnP,YAAY,cAAcmE,MAAO4F,EAAgBqF,UAAWrF,KAAuB,OAAJiF,QAAI,IAAJA,OAAI,EAAJA,EAAM7K,OAAOS,SAAWiH,GAAUD,EAAqBC,EAAW,OAAJmD,QAAI,IAAJA,OAAI,EAAJA,EAAM7K,OAAQrG,GAAG,UAC1KN,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CAACJ,MAAOmN,EAAW9M,SAAS,KAAKC,WAAW,MAAKvB,UAC/C,OAAJyR,QAAI,IAAJA,GAAS,QAALC,EAAJD,EAAMJ,WAAG,IAAAK,OAAL,EAAJA,EAAW5B,OAAQ,OAIO,WAApB,OAAJ2B,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,OAAOuB,SAWW,gBAApB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,OAAOuB,SAcW,eAApB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,OAAOuB,QAxBtB1O,GACEhD,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CACHd,GAAG,OACHU,MAAOmN,EACP9M,SAAS,KACTC,WAAW,MAAKvB,SAEX,OAAJyR,QAAI,IAAJA,OAAI,EAAJA,EAAM7K,QA4BsB,kBAApB,OAAJ6K,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,OAAOuB,SAOW,mBAApB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,OAAOuB,QANtB1O,GACEhD,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CAACC,SAAS,KAAKC,WAAW,MAC7BN,MAAOmN,EAAUpO,SACZ,OAAJyR,QAAI,IAAJA,OAAI,EAAJA,EAAM7K,SAUsB,sBAApB,OAAJ6K,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,OAAOuB,SAMW,qBAApB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,OAAOuB,SAMW,oBAApB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,OAAOuB,WAXtB1O,GACEhD,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CAACJ,MAAOmN,EAAW9M,SAAS,KAAKC,WAAW,MAAKvB,SAC/C,OAAJyR,QAAI,IAAJA,OAAI,EAAJA,EAAM7K,SAgBb,OACEmJ,EAAAA,EAAAA,eAACqB,EAAAA,IAAE1B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO,OAAJ+B,QAAI,IAAJA,OAAI,EAAJA,EAAMK,gBAAc,IACxB5B,IAAKJ,EACLxO,SAAU,CAAE2N,GAAI,QAChBvE,KAAM,CAAEuE,GAAI,QAAS8C,GAAI,QAAS7C,GAAI,QACtCrH,YAAY,gBACX5E,EACE,IAGN,eAMV,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMkL,QAAS,IAAKlO,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,CAACnE,SAAUA,EAAUlB,YAAaA,EAAaC,eAAgBA,EAAgBgB,UAAWA,EAAWH,gBAAiBA,EAAiBM,aAAcA,EAAcL,YAAaA,EAAaC,YAAaA,EAAaK,YAAaA,EAAaF,SAAUA,EAAUI,SAAUA,EAAUlB,UAAWA,MAI1U,C,yKCpPA,MAgFA,EAhFsB9N,IAAW,IAAD+S,EAAAC,EAC5B,MAAM,QAAErQ,EAAO,OAAEC,EAAM,UAAEuG,EAAS,cAAE9C,EAAa,KAAEtC,GAAS/D,GACrDsN,EAAgBrJ,IAAqBS,EAAAA,EAAAA,aACrCuO,EAAaC,IAAkBxO,EAAAA,EAAAA,UAAS,KACxCF,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClC6I,EAAS4F,IAAczO,EAAAA,EAAAA,UAAS,IACjC0O,GAAWC,EAAAA,EAAAA,MAkCjB,OAJAxM,EAAAA,EAAAA,YAAUnD,gBACA0P,GAASE,EAAAA,EAAAA,MAhBW5P,WAAa,IAAD6P,EAAAC,EAAAC,EAAAC,EACtCjP,GAAY,GACZ,MAAMqC,QAAesM,GAASO,EAAAA,EAAAA,MAC9BT,EAAqB,OAANpM,QAAM,IAANA,GAAe,QAATyM,EAANzM,EAAQ8M,eAAO,IAAAL,OAAT,EAANA,EAAiBxP,MAEhC,MAAM8P,EAAmB,CACrB,CAAEpB,OAAQ,IAAKqB,SAAU,MAAOzC,YAAY,EAAOnH,MAAO,SAChD,OAANpD,QAAM,IAANA,GAAe,QAAT0M,EAAN1M,EAAQ8M,eAAO,IAAAJ,GAAM,QAANC,EAAfD,EAAiBzP,YAAI,IAAA0P,GAAK,QAALC,EAArBD,EAAwB,UAAE,IAAAC,OAApB,EAANA,EAA4BK,SAAU,IACrCvE,QAAOwE,IAAiC,KAAnB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,gBACvB5M,KAAI2M,IAAK,CAAOvB,OAAa,OAALuB,QAAK,IAALA,OAAK,EAALA,EAAOzM,MAAOuM,SAAe,OAALE,QAAK,IAALA,OAAK,EAALA,EAAOxL,UAGhE2K,EAAWU,GACXpP,GAAY,EAAM,EAIlByP,EAAuB,GACxB,KAECzT,EAAAA,EAAAA,MAACiC,EAAAA,GAAK,CAACC,QAASA,EAASW,KAAK,OAAOV,OAAQA,EAAO9B,SAAA,EAChDC,EAAAA,EAAAA,KAAC+B,EAAAA,GAAY,KACbrC,EAAAA,EAAAA,MAACsC,EAAAA,GAAY,CAAAjC,SAAA,EACTC,EAAAA,EAAAA,KAACiC,EAAAA,GAAW,CAAAlC,SAAC,oBACbC,EAAAA,EAAAA,KAACmC,EAAAA,GAAgB,KACjBnC,EAAAA,EAAAA,KAACoC,EAAAA,GAAS,CAAArC,SACL0D,GACGzD,EAAAA,EAAAA,KAACiB,EAAAA,KAAI,CAACqI,eAAgB,SAAUD,WAAY,SAAUF,MAAM,OAAMpJ,UAC9DC,EAAAA,EAAAA,KAACoT,EAAAA,EAAO,OAGZpT,EAAAA,EAAAA,KAACqT,EAAAA,EAAgB,CACbhH,MAAO,WACP5I,SAAUA,EACV6P,WAAmB,OAAP9G,QAAO,IAAPA,EAAAA,EAAW,GAEvB+G,QAAa,OAAJvQ,QAAI,IAAJA,EAAAA,EAAQ,GACjBoJ,UAAWpJ,EACXwQ,mBAA8B,OAAXtB,QAAW,IAAXA,GAAgB,QAALF,EAAXE,EAAc,UAAE,IAAAF,GAAQ,QAARC,EAAhBD,EAAkBgB,cAAM,IAAAf,OAAb,EAAXA,EAA0BxD,QAAQwE,IAAkC,KAAnB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,kBAA0B,GAChGO,cAAeA,IAAM,GACrBC,YAAY,EACZC,YAAY,EACZpH,eAAgBA,EAChBrJ,kBAAmBA,EACnB0Q,WAAW,SACXC,cAAc,OAI1BnU,EAAAA,EAAAA,MAAC2C,EAAAA,GAAW,CAAAtC,SAAA,EACRL,EAAAA,EAAAA,MAAC4C,EAAAA,OAAM,CAACgB,QAAQ,QAAQf,KAAK,KAAKjC,GAAI,EAAGoC,QA/DpCC,UACjB,IACIe,GAAY,GACZ4B,EAAc8C,EAAWmE,GACzB3K,GACJ,CACA,MAAOyF,GACHjE,QAAQC,IAAIgE,EAChB,CAAC,QAEG3D,GAAY,EAChB,GAoD4EoQ,WAAUrQ,EAAyBsQ,UAAU/T,EAAAA,EAAAA,KAACgU,EAAAA,IAAO,IAAIjU,SAAA,CAAC,IAAE0D,GAAWzD,EAAAA,EAAAA,KAACoT,EAAAA,EAAO,IAAM,aACrJpT,EAAAA,EAAAA,KAACsC,EAAAA,OAAM,CAACgB,QAAQ,UAAUf,KAAK,KAAKC,YAAY,MAAME,QAASA,IAAMd,IAAU7B,SAAC,kBAGpF,C,wPCrEhB,MA4KA,EA5KckU,KAEV,MAAOjR,EAAMY,IAAWD,EAAAA,EAAAA,UAAS,KAC3B,OAAE9B,EAAM,OAAEqS,EAAM,QAAEtS,IAAYuS,EAAAA,EAAAA,MAC9BlQ,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,UACtCZ,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCyQ,EAAc5Q,IAAmBG,EAAAA,EAAAA,WAAS,GAE3CmD,EAAYnE,UACde,GAAY,GACZ,IAAIqC,QAAeC,EAAAA,EAAAA,IAAqB,eAAd/B,EAAKgC,KAAwB,eAAc,yBAAAR,OAA4BxB,EAAKiC,MACtGtC,EAAc,OAANmC,QAAM,IAANA,OAAM,EAANA,EAAQ/C,MAChBU,GAAY,EAAM,EAGhBc,EAAgB,CAClB6P,WAAY,GACZC,MAAO,GACPC,SAAU,GACVpO,SAAUlC,EAAKiC,KAGb5B,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAeA,EACfgQ,iBAAkBC,EAAAA,GAClB7P,SAAUA,CAACC,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,EAC5B4P,GAAS,KAGX,OAAEzP,EAAM,QAAEC,EAAO,OAAEL,EAAM,WAAEM,EAAU,aAAEC,EAAY,aAAEC,EAAY,cAAEC,EAAa,UAAEP,GAAcT,EAGhGgE,IAFWU,EAAAA,EAAAA,MAEArG,UACb,GAAIK,EAAM,CACN,IAAI+C,QAAeC,EAAAA,EAAAA,IAAO,yBAA0BhD,GAChD+C,GAA4B,MAAlBA,EAAO9C,QACjBqI,OAAOC,KAAK,GAAD9F,OAAIkP,EAAAA,EAASC,QAAO,0BAAAnP,OAAyBzC,IACxD4C,EAAAA,GAAMiP,QAAQ,6BACP9O,GAAqC,MAA3BA,EAAOR,SAAStC,QACjC2C,EAAAA,GAAMzC,MAAM,iBAEpB,IAEEP,EAAaD,UACf,GAAIK,EAAM,CACN,IAAI+C,QAAe+O,EAAAA,EAAAA,IAAU,uBAAwB9R,GACjD+C,GAA4B,MAAlBA,EAAO9C,QACjB6D,GAER,GAGE4N,EAAU/R,UACZ,IACIe,GAAY,GACZ,MAAMqR,EAAW,IAAIC,SACb,OAARD,QAAQ,IAARA,GAAAA,EAAUE,OAAO,aAAcpQ,EAAOwP,YAC9B,OAARU,QAAQ,IAARA,GAAAA,EAAUE,OAAO,WAAYpQ,EAAOsB,UAC5B,OAAR4O,QAAQ,IAARA,GAAAA,EAAUE,OAAO,WAAYpQ,EAAO0P,UAGpC1P,EAAOyP,MAAMY,SAASC,IACV,OAARJ,QAAQ,IAARA,GAAAA,EAAUE,OAAO,QAASE,EAAK,IAGnC,IAAI5P,QAAiBC,EAAAA,EAAAA,IAAQ,mBAAoBuP,GAC7CxP,GAAgC,MAApBA,EAAStC,SACrB6D,IACAxC,EAAOS,YAEf,CAAE,MAAOsC,GACLjE,QAAQC,IAAIgE,EAChB,CAAC,QAEG3D,GAAY,EAChB,GAOJ,OAJAoC,EAAAA,EAAAA,YAAU,KACNgB,GAAW,GACZ,CAACsN,EAAc/O,KAGdrF,EAAAA,EAAAA,KAAA,OAAAD,UACIL,EAAAA,EAAAA,MAACC,EAAAA,KAAI,CAACC,gBAAgB,kBAAkBC,GAAI,EAAGC,IAAK,EAAEC,SAAA,EAClDC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,GAAI2R,GAAI,GAAI/R,UACnCL,EAAAA,EAAAA,MAACiP,EAAAA,EAAI,CAACpO,KAAM,OAAOR,SAAA,EACfC,EAAAA,EAAAA,KAACoV,EAAAA,QAAO,CAAC7S,KAAK,KAAK1C,GAAI,EAAEE,SAAE,mBAG3BC,EAAAA,EAAAA,KAACqV,EAAAA,EAAU,KACXrV,EAAAA,EAAAA,KAACsV,EAAAA,OAAM,CAAC7T,GAAI,EAAG4H,WAAW,aAAYtJ,SACjC0D,GACGzD,EAAAA,EAAAA,KAACiB,EAAAA,KAAI,CAACqI,eAAgB,SAAUD,WAAY,SAAUF,MAAM,OAAMpJ,UAC9DC,EAAAA,EAAAA,KAACoT,EAAAA,EAAO,MAEO,KAAb,OAAJpQ,QAAI,IAAJA,OAAI,EAAJA,EAAMkL,SACJlO,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CAACI,UAAW,SAAU2H,MAAM,OAAO9H,SAAS,KAAKC,WAAW,MAAKvB,SAAC,4BAGnE,OAAJiD,QAAI,IAAJA,OAAI,EAAJA,EAAMsD,KAAKC,IAAI,IAAAgP,EAAA,OACfvV,EAAAA,EAAAA,KAACwV,EAAAA,EAAc,CAAC/N,KAAMlB,EAAK8N,WAAY9N,KAAMA,EAAKxG,SACzC,OAAJwG,QAAI,IAAJA,GAAW,QAAPgP,EAAJhP,EAAM+N,aAAK,IAAAiB,OAAP,EAAJA,EAAajP,KAAK6O,IACfnV,EAAAA,EAAAA,KAACwV,EAAAA,EAAc,CAAClN,SAAUA,EAAU9E,gBAAiBA,EAAiBZ,WAAYA,EAAYI,KAAMmS,EAAM1N,KAAM0N,EAAKM,SAAUlN,QAAM,OAE5H,YAKrCvI,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,GAAI2R,GAAI,GAAK4D,SAAU,CAAEvV,KAAM,EAAG2R,GAAI,GAAI/R,UACjEL,EAAAA,EAAAA,MAACiP,EAAAA,EAAI,CAAA5O,SAAA,EACDL,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,IAAKJ,SAAA,EAC5BL,EAAAA,EAAAA,MAACsH,EAAAA,UAAS,CAACC,QAAQ,OAAOC,GAAG,MAAM7F,SAAS,KAAKC,WAAW,MAAMzB,GAAG,MAAKE,SAAA,CAAC,eAC5DC,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CAACJ,MAAO,MAAMjB,SAAC,UAEnCC,EAAAA,EAAAA,KAAC2V,EAAAA,MAAK,CACFC,QAAS1B,EACT7S,SAAS,KACT+F,SAAUhC,EACVyQ,OAAQA,IAAMC,WAAWlU,EAAS,KAClC+E,MAAO9B,EAAOwP,WACd5M,KAAK,aACLE,YAAY,oBACZrG,WAAW,MACXsG,YAAmB,OAAN3C,QAAM,IAANA,GAAAA,EAAQoP,YAAqB,OAAPnP,QAAO,IAAPA,GAAAA,EAASmP,WAAa,UAAY,OAExExS,IAAgB,OAANgD,QAAM,IAANA,OAAM,EAANA,EAAQwP,cAAkB,OAAJrR,QAAI,IAAJA,OAAI,EAAJA,EAAMyL,QAAQsH,IAAM,IAAAC,EAAAC,EAAA,OAAW,OAANF,QAAM,IAANA,GAAkB,QAAZC,EAAND,EAAQ1B,kBAAU,IAAA2B,GAAe,QAAfC,EAAlBD,EAAoB9K,qBAAa,IAAA+K,OAA3B,EAANA,EAAmC9K,SAAe,OAANtG,QAAM,IAANA,OAAM,EAANA,EAAQwP,WAAWnJ,cAAc,IAAEgD,QAAS,IAC9IlO,EAAAA,EAAAA,KAACkJ,EAAAA,KAAI,CAACoB,SAAU,WAAYwE,OAAQ,YAAaoH,GAAI,WAAY/M,MAAO,OAAQgN,aAAc,oBAAqBhH,WAAY,EAAEpP,SACxH,OAAJiD,QAAI,IAAJA,OAAI,EAAJA,EAAMyL,QAAQsH,IAAM,IAAAK,EAAAC,EAAA,OAAW,OAANN,QAAM,IAANA,GAAkB,QAAZK,EAANL,EAAQ1B,kBAAU,IAAA+B,GAAe,QAAfC,EAAlBD,EAAoBlL,qBAAa,IAAAmL,OAA3B,EAANA,EAAmClL,SAAe,OAANtG,QAAM,IAANA,OAAM,EAANA,EAAQwP,WAAWnJ,cAAc,IAAE5E,KAAI,CAACyP,EAAQlG,KAClH7P,EAAAA,EAAAA,KAACoJ,EAAAA,SAAQ,CAACkN,EAAG,EAAGC,aAAc,oBAAqBC,GAAI,CAAE,eAAgB,CAAED,aAAc,SAA8B9M,OAAQ,UAC3H/G,QAASA,KACL4C,EAAc,aAAoB,OAANyQ,QAAM,IAANA,OAAM,EAANA,EAAQ1B,WAAW,EACjDtU,SAEK,OAANgW,QAAM,IAANA,OAAM,EAANA,EAAQ1B,YALmG,OAAN0B,QAAM,IAANA,OAAM,EAANA,EAAQ7P,UAU9HxG,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CAACvB,GAAG,OAAOmB,MAAO,MAAMjB,SAAA,CAAC,IAAEkF,EAAOoP,YAAcnP,EAAQmP,YAAcpP,EAAOoP,kBAEtF3U,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAACC,QAAS,CAAEC,KAAM,IAAKJ,SAAA,EAC5BC,EAAAA,EAAAA,KAACgH,EAAAA,UAAS,CAACC,QAAQ,OAAOC,GAAG,MAAM7F,SAAS,KAAKC,WAAW,MAAMzB,GAAG,MAAKE,SAAC,eAG3EC,EAAAA,EAAAA,KAAC2V,EAAAA,MAAK,CACFtU,SAAS,KACT+F,SAAUhC,EACVyQ,OAAQA,IAAMC,WAAWlU,EAAS,KAClC+E,MAAO9B,EAAO0P,SACd9M,KAAK,WACLE,YAAY,kBACZrG,WAAW,MACXsG,YAAmB,OAAN3C,QAAM,IAANA,GAAAA,EAAQsP,UAAmB,OAAPrP,QAAO,IAAPA,GAAAA,EAASqP,SAAW,UAAY,QAErE7U,EAAAA,EAAAA,MAAC0B,EAAAA,KAAI,CAACvB,GAAG,OAAOmB,MAAO,MAAMjB,SAAA,CAAC,IAAEkF,EAAOsP,UAAYrP,EAAQqP,UAAYtP,EAAOsP,gBAElFvU,EAAAA,EAAAA,KAAChB,EAAAA,EAAM,CAACI,MAAOyF,EAAOyP,MAAMpG,OAAQzN,aAAe0U,GAAS7P,EAAc,QAAS6P,MACnFnV,EAAAA,EAAAA,KAACsC,EAAAA,OAAM,CAACC,KAAK,KAAKuR,WAAUrQ,EAAyBf,QAAS2C,EAAc/B,QAAQ,QAAQhC,WAAW,MAAKvB,SACvG0D,GAAWzD,EAAAA,EAAAA,KAACoT,EAAAA,EAAO,IAAM,yBAQxC,C,8JC/Kd,MAyFA,EAzFsBnU,IAAW,IAADwX,EAAAC,EAC5B,MAAM,QAAE9U,EAAO,OAAEC,EAAM,UAAEuG,EAAS,cAAE9C,EAAa,KAAEtC,GAAS/D,EAEtDoT,GAAWC,EAAAA,EAAAA,OAEV7O,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClC6I,EAAS4F,IAAczO,EAAAA,EAAAA,UAAS,KAChCgT,EAAUC,IAAejT,EAAAA,EAAAA,UAAS,KAClC4I,EAAgBrJ,IAAqBS,EAAAA,EAAAA,UAAS,IA0CrD,OALAmC,EAAAA,EAAAA,YAAU,KACNuM,GAASwE,EAAAA,EAAAA,MAtBiBlU,WAAa,IAAD6P,EAAAC,EAAAC,EAAAC,EAAAmE,EAAAC,EACtCrT,GAAY,GAEZ,MAAMqC,QAAesM,GAAS2E,EAAAA,EAAAA,MAC9BJ,EAAkB,OAAN7Q,QAAM,IAANA,GAAe,QAATyM,EAANzM,EAAQ8M,eAAO,IAAAL,OAAT,EAANA,EAAiBxP,MAE7B,MAAM8P,EAAmB,CACrB,CAAEpB,OAAQ,IAAKqB,SAAU,MAAOzC,YAAY,EAAOnH,MAAO,IAC1D,CACIuI,OAAQ,SAAUqB,SAAU,aAAczC,YAAY,EAAMG,QAAQ,EACpEe,KAAM1M,IAAA,IAAC,IAAEsM,GAAKtM,EAAA,OACVsM,EAAI6F,SAASC,UAAU,OAGrB,OAANnR,QAAM,IAANA,GAAe,QAAT0M,EAAN1M,EAAQ8M,eAAO,IAAAJ,GAAM,QAANC,EAAfD,EAAiBzP,YAAI,IAAA0P,GAAK,QAALC,EAArBD,EAAwB,UAAE,IAAAC,GAAQ,QAARmE,EAA1BnE,EAA4BK,cAAM,IAAA8D,GAAiD,QAAjDC,EAAlCD,EAAoCrI,QAAQwE,IAAkC,KAAnB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,uBAAsB,IAAA6D,OAA7E,EAANA,EAAqFzQ,KAAK2M,GAA2B,gBAAX,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOxL,OAAyB,CAAEiK,OAAa,OAALuB,QAAK,IAALA,OAAK,EAALA,EAAOzM,MAAOuM,SAAe,OAALE,QAAK,IAALA,OAAK,EAALA,EAAOxL,UAAY,IAGlM2K,EAAWU,GACXpP,GAAY,EAAM,EAKlByP,EAAuB,GACxB,KAGCzT,EAAAA,EAAAA,MAACiC,EAAAA,GAAK,CAACC,QAASA,EAASW,KAAK,OAAOV,OAAQA,EAAO9B,SAAA,EAChDC,EAAAA,EAAAA,KAAC+B,EAAAA,GAAY,KACbrC,EAAAA,EAAAA,MAACsC,EAAAA,GAAY,CAAAjC,SAAA,EACTC,EAAAA,EAAAA,KAACiC,EAAAA,GAAW,CAAAlC,SAAC,iBACbC,EAAAA,EAAAA,KAACmC,EAAAA,GAAgB,KACjBnC,EAAAA,EAAAA,KAACoC,EAAAA,GAAS,CAAArC,SACL0D,GACGzD,EAAAA,EAAAA,KAACiB,EAAAA,KAAI,CAACqI,eAAgB,SAAUD,WAAY,SAAUF,MAAM,OAAMpJ,UAC9DC,EAAAA,EAAAA,KAACoT,EAAAA,EAAO,OAEZpT,EAAAA,EAAAA,KAACqT,EAAAA,EAAgB,CACbhH,MA5DV,QA6DU5I,SAAUA,EACV6P,WAAmB,OAAP9G,QAAO,IAAPA,EAAAA,EAAW,GAEvB+G,QAAa,OAAJvQ,QAAI,IAAJA,EAAAA,EAAQ,GACjBoJ,UAAWpJ,EACXwQ,mBAA2B,OAARmD,QAAQ,IAARA,GAAa,QAALF,EAARE,EAAW,UAAE,IAAAF,GAAQ,QAARC,EAAbD,EAAezD,cAAM,IAAA0D,OAAb,EAARA,EAAuBjI,QAAQwE,IAAkC,KAAnB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,kBAA0B,GAC7FO,cAAeA,IAAM,GACrBC,YAAY,EACZC,YAAY,EACZpH,eAAgBA,EAChBrJ,kBAAmBA,EACnB0Q,WAAW,SACXC,cAAc,OAI1BnU,EAAAA,EAAAA,MAAC2C,EAAAA,GAAW,CAAAtC,SAAA,EACRL,EAAAA,EAAAA,MAAC4C,EAAAA,OAAM,CAACgB,QAAQ,QAAQf,KAAK,KAAKjC,GAAI,EAAGwT,WAAUrQ,EAAyBsQ,UAAU/T,EAAAA,EAAAA,KAACgU,EAAAA,IAAO,IAAKtR,QAtE9FC,UACjB,IACIe,GAAY,GACZ4B,EAAc8C,EAAWmE,GACzB3K,GACJ,CACA,MAAOyF,GACHjE,QAAQC,IAAIgE,EAChB,CAAC,QAEG3D,GAAY,EAChB,GA2DqI3D,SAAA,CAAC,IAAE0D,GAAWzD,EAAAA,EAAAA,KAACoT,EAAAA,EAAO,IAAM,aACrJpT,EAAAA,EAAAA,KAACsC,EAAAA,OAAM,CAACgB,QAAQ,UAAUf,KAAK,KAAKC,YAAY,MAAME,QAASA,IAAMd,IAAU7B,SAAC,kBAGpF,C","sources":["views/admin/document/component/Upload.js","views/admin/document/component/Delete.js","views/admin/document/component/LinkModel.js","components/FolderTreeView/folderTreeView.js","components/commonTableModel/Contact.js","components/commonTableModel/ContactModel.js","views/admin/document/index.js","components/commonTableModel/LeadModel.js"],"sourcesContent":["// Chakra imports\nimport {\n  Box, Flex,\n  Grid,\n  GridItem,\n  Icon,\n  Text,\n  useColorModeValue\n} from \"@chakra-ui/react\";\n// Assets\nimport Dropzone from \"components/Dropzone\";\nimport { MdUpload } from \"react-icons/md\";\n\nexport default function Upload(props) {\n  const { used, total, count, ...rest } = props;\n  // Chakra Color Mode\n  const textColorPrimary = useColorModeValue(\"secondaryGray.900\", \"white\");\n  const brandColor = useColorModeValue(\"brand.500\", \"white\");\n  const textColorSecondary = \"gray.400\";\n  return (\n    <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} gap={2}>\n      <GridItem colSpan={{ base: 12, '2xl': 5 }} >\n        <Dropzone\n          w={{ base: \"100%\", \"2xl\": \"240px\" }}\n          me='36px'\n          minH={200}\n          height={'100%'}\n          onFileSelect={props.onFileSelect}\n          content={\n            <Box>\n              <Icon as={MdUpload} w='70px' h='70px' color={brandColor} />\n              <Flex justify='center' mx='auto' mb='12px'>\n                <Text fontSize='xl' fontWeight='700' color={brandColor}>\n                  Upload Files\n                </Text>\n              </Flex>\n              <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>\n                {count > 0 && <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>\n                  Selected Files : {count}\n                </Text>}\n              </Text>\n            </Box>\n          }\n        />\n      </GridItem>\n      <GridItem colSpan={{ base: 12, '2xl': 7 }} >\n        <Flex direction='column' >\n          <Text\n            color={textColorPrimary}\n            fontWeight='bold'\n            textAlign='start'\n            fontSize='2xl'\n            mt={{ base: \"20px\", \"2xl\": \"50px\" }}>\n            Upload Files\n          </Text>\n          <Text\n            color={textColorSecondary}\n            fontSize='md'\n            my={{ base: \"auto\", \"2xl\": \"10px\" }}\n            mx='auto'\n            textAlign='start'>\n            Accepted File Types (Images, PDFs, Word docs, Powerpoint, Excel, ZIP, and video files - 15MB max)\n          </Text>\n        </Flex>\n      </GridItem>\n    </Grid>\n  );\n}\n\n","import { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react';\nimport { deleteManyApi } from 'services/api';\n\nconst Delete = (props) => {\n    const handleDeleteClick = async () => {\n        if (props.method === 'one') {\n            props.deleteFile(props.id)\n            props.onClose(false)\n        } else if (props.method === 'many') {\n            try {\n                let response = await deleteManyApi(props.url, props.data)\n                if (response.status === 200) {\n                    props.setSelectedValues([])\n                    props.onClose(false)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    };\n\n    const handleClose = () => {\n        props.onClose(false)\n    }\n\n    return (\n        <div>\n            <Modal onClose={props.onClose} isOpen={props.isOpen} isCentered>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>Delete Document{props.method === 'one' ? '' : 's'}</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        Are You Sure To Delete selected Document{props.method === 'one' ? '' : 's'} ?\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button size=\"sm\" colorScheme=\"red\" mr={2} onClick={handleDeleteClick}>Yes</Button>\n                        <Button size=\"sm\" variant=\"outline\" onClick={handleClose}>No</Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </div>\n    )\n}\n\nexport default Delete\n","import { LinkIcon } from '@chakra-ui/icons';\nimport { Button, Flex, FormLabel, Grid, GridItem, IconButton, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, useDisclosure } from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { getApi, postApi } from 'services/api';\nimport ContactModel from 'components/commonTableModel/ContactModel';\nimport LeadModel from \"components/commonTableModel/LeadModel\";\nimport { LiaMousePointerSolid } from 'react-icons/lia';\n\nconst Link = (props) => {\n    const { setLinkDocument } = props;\n    const [isLoding, setIsLoding] = useState(false)\n    const [data, setData] = useState([])\n    const [contactModelOpen, setContactModel] = useState(false);\n    const [leadModelOpen, setLeadModel] = useState(false);\n    const user = JSON.parse(localStorage.getItem('user'))\n\n    const initialValues = {\n        linkWith: '',\n        linkContact: '',\n        linkLead: '',\n    }\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        onSubmit: (values, { resetForm }) => {\n            handleClick();\n            resetForm();\n        },\n    });\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\n\n    const handleClick = async () => {\n        try {\n            setIsLoding(true)\n            let data = values.linkContact ? { linkContact: values.linkContact } : { linkLead: values.linkLead }\n            let response = await postApi(`api/document/link-document/${props.id}`, data)\n            if (response && response.status === 200) {\n                setLinkDocument((pre) => !pre)\n                props.onClose();\n            } else {\n                toast.error(response.response.data?.message)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n        finally {\n            setIsLoding(false)\n        }\n    }\n\n    const handleClose = () => {\n        props.onClose(false)\n    }\n\n    const fetchData = async () => {\n        if (values.linkWith === 'Contact') {\n            let result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`);\n            values.createBy = result?._id;\n            setData(prevData => [\n                // ...prevData,\n                ...(result?.data?.map(item => ({ label: item.firstName + ' ' + item.lastName, value: item._id })) || [])\n            ]);\n        } else if (values.linkWith === 'lead') {\n            let result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);\n            values.createBy = result?._id;\n            setData(prevData => [\n                // ...prevData,\n                ...(result?.data?.map(item => ({ label: item.leadName, value: item._id })) || [])\n            ]);\n        }\n    }\n\n    useEffect(() => {\n        fetchData()\n    }, [values.linkWith]);\n\n    return (\n        <>\n\n            <Modal onClose={props.onClose} isOpen={props.isOpen} >\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>Link With Document</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n\n                        <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\n\n                            <GridItem colSpan={{ base: 12 }}>\n                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                    Link With\n                                </FormLabel>\n                                <RadioGroup onChange={(e) => { resetForm(); setFieldValue('linkWith', e) }} value={values.linkWith}>\n                                    <Stack direction='row'>\n                                        <Radio value='Contact'>Contact</Radio>\n                                        <Radio value='lead'>Lead</Radio>\n                                    </Stack>\n                                </RadioGroup>\n                                <Text mb='10px' color={'red'}> {errors.linkWith && touched.linkWith && errors.linkWith}</Text>\n                            </GridItem>\n\n                            {values.linkWith === 'Contact' ?\n                                <GridItem colSpan={{ base: 12 }}>\n                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                        Link Contact\n                                    </FormLabel>\n                                   \n                                    <Flex>\n\n                                        <Select\n                                            value={values.linkContact}\n                                            name=\"linkContact\"\n                                            onChange={handleChange}\n                                            mb={errors.linkContact && touched.linkContact ? undefined : '10px'}\n                                            fontWeight='500'\n                                            placeholder='Link Contact'\n                                            borderColor={errors.linkContact && touched.linkContact ? \"red.300\" : null}\n                                        >\n                                            {data?.map((item) => {\n                                                return <option value={item.value} key={item.value}>{values.linkWith === 'Contact' && `${item.label}`}</option>\n                                            })}\n                                        </Select>\n                                        <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\n                                        <Text mb='10px' color={'red'}> {errors.linkContact && touched.linkContact && errors.linkContact}</Text>\n                                    </Flex>\n                                </GridItem>\n                                : values.linkWith === 'lead' &&\n                                <GridItem colSpan={{ base: 12 }}>\n                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                        Link Lead\n                                    </FormLabel>\n                                    \n                                    <Flex>\n\n                                        <Select\n                                            value={values.linkLead}\n                                            name=\"linkLead\"\n                                            onChange={handleChange}\n                                            mb={errors.linkLead && touched.linkLead ? undefined : '10px'}\n                                            fontWeight='500'\n                                            placeholder='Link Lead'\n                                            borderColor={errors.linkLead && touched.linkLead ? \"red.300\" : null}\n                                        >\n                                            {data?.map((item) => {\n                                                return <option value={item.value} key={item.value}>{values.linkWith === 'lead' && `${item.label}`}</option>\n                                            })}\n                                        </Select>\n                                        <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />\n                                        <Text mb='10px' color={'red'}> {errors.linkLead && touched.linkLead && errors.linkLead}</Text>\n                                    </Flex>\n                                    <Text mb='10px' color={'red'}> {errors.linkLead && touched.linkLead && errors.linkLead}</Text>\n                                </GridItem>\n\n                            }\n\n                        </Grid>\n\n\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button size=\"sm\" colorScheme='brand' rightIcon={<LinkIcon />} mr={2} onClick={handleClick}>Link</Button>\n                        <Button size=\"sm\" variant=\"outline\" colorScheme='red' onClick={() => { handleClose(); resetForm() }}>Cancel</Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal >\n            <ContactModel data={data} isOpen={contactModelOpen} onClose={setContactModel} fieldName='linkContact' setFieldValue={setFieldValue} />\n            {/* Lead Model  */}\n            <LeadModel data={data} isOpen={leadModelOpen} onClose={setLeadModel} fieldName='linkLead' setFieldValue={setFieldValue} />\n        </>\n    )\n}\n\nexport default Link\n","import { DeleteIcon, DownloadIcon, LinkIcon, ViewIcon } from '@chakra-ui/icons';\nimport { Collapse, Flex, Icon, IconButton, List, ListIcon, ListItem, Menu, MenuButton, MenuItem, MenuList, Text } from '@chakra-ui/react';\nimport React, { useState } from 'react'\nimport { FcOpenedFolder } from 'react-icons/fc';\nimport { FiChevronDown, FiChevronRight, FiFile } from 'react-icons/fi';\nimport { IoIosContact } from 'react-icons/io';\nimport { MdLeaderboard } from 'react-icons/md';\nimport { useNavigate } from 'react-router-dom';\nimport Delete from 'views/admin/document/component/Delete';\nimport LinkModel from 'views/admin/document/component/LinkModel';\nimport { CiMenuKebab } from \"react-icons/ci\";\n\nconst FolderTreeView = ({ data, deleteFile, item, download, name, isFile, children, setLinkDocument, from }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    // const user = localStorage.getItem('user');\n    const [deleteModel, setDelete] = useState(false);\n    const [linkModel, setLinkModel] = useState(false);\n    const [id, setId] = useState(false);\n    const navigate = useNavigate()\n\n    const handleToggle = () => {\n        setIsOpen(!isOpen);\n    };\n    const isFolder = !isFile && !!children;\n\n    const handleClick = (data) => {\n        download(data)\n    }\n\n    const deletedata = (data) => {\n        setDelete(true)\n        setId(data)\n    }\n\n    const handleLinkClick = (data) => {\n        setLinkModel(true)\n        setId(data)\n    }\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n\n    function isImageUrl(url) {\n        const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp'];\n        const urlExtension = url.substring(url.lastIndexOf('.')).toLowerCase();\n        return imageExtensions.includes(urlExtension);\n    }\n    return (\n        <List width={'100%'} >\n            <ListItem alignItems={'center'} display={'flex'} >\n                <Text alignItems={'center'} justifyContent={'space-between'} display={'flex'} width={'100%'} onClick={isFolder ? handleToggle : undefined} _hover={{ cursor: 'pointer', textDecoration: 'none' }}>\n                    <Flex width={'70%'} alignItems={'center'}>\n                        <ListIcon as={isFile ? FiFile : FcOpenedFolder} />\n                        {isFolder && (isOpen ? <FiChevronDown /> : <FiChevronRight />)}\n                        {name}\n                    </Flex>\n                    {item?.createByName ? <Text>({item?.createByName}) </Text> : null}\n                    {!isFolder &&\n                        <Flex justifyContent={'right'} width={'100%'}  >\n                            <Menu isLazy  >\n                                <MenuButton><CiMenuKebab /></MenuButton>\n                                <MenuList position={'absolute'} right={-5} pl={'0.5em'} minW={'fit-content'} >\n                                    {!from && data?.linkContact ?\n                                        <MenuItem pr={2} w={'180px'} onClick={() => navigate(`/contactView/${data?.linkContact}`)} icon={<IoIosContact fontSize={15} />}>Linked Contact</MenuItem>\n                                        : !from && data?.linkLead && <MenuItem pr={2} w={'180px'} onClick={() => navigate(`/leadView/${data?.linkLead}`)} icon={<MdLeaderboard fontSize={15} />}>Linked Lead</MenuItem>\n                                    }\n                                    {!from && <MenuItem pr={10} alignItems={'start'} color={'blue'} onClick={() => handleLinkClick(data?._id)} icon={<LinkIcon fontSize={15} />}>Link</MenuItem>}\n                                    {isImageUrl(data?.img) && <MenuItem alignItems={'start'} pr={10} color={'green'} onClick={() => window.open(data?.img)} icon={<ViewIcon fontSize={15} />}>View</MenuItem>}\n                                    <MenuItem pr={10} alignItems={'start'} onClick={() => handleClick(data?._id)} icon={<DownloadIcon fontSize={15} />}>Download</MenuItem>\n                                    {!from && <MenuItem alignItems={'start'} pr={10} color={'red'} onClick={() => deletedata(data?._id)} icon={<DeleteIcon fontSize={15} />}>Delete</MenuItem>}\n                                </MenuList>\n                            </Menu>\n                        </Flex>\n                    }\n                    <Delete isOpen={deleteModel} onClose={setDelete} method='one' deleteFile={deleteFile} id={id} />\n                    <LinkModel isOpen={linkModel} setLinkDocument={setLinkDocument} onClose={setLinkModel} id={id} />\n                </Text>\n            </ListItem>\n            {\n                isFolder && (\n                    <Collapse in={isOpen} animateOpacity>\n                        <List styleType=\"disc\" ml={4}>\n                            {children}\n                        </List>\n                    </Collapse>\n                )\n            }\n        </List>\n    );\n};\n\n\nexport default FolderTreeView\n","import {\n  Box, Checkbox,\n  Flex, Table,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n  useColorModeValue\n} from \"@chakra-ui/react\";\nimport { useMemo, useState } from \"react\";\nimport {\n  useGlobalFilter,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport { GrFormNext, GrFormPrevious } from \"react-icons/gr\";\n\n// Custom components\nimport Card from \"components/card/Card\";\nimport { Link } from \"react-router-dom\";\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\nimport Pagination from \"components/pagination/Pagination\";\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\n\nexport default function ContactTable(props) {\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\n\n  const columns = useMemo(() => columnsData, [columnsData]);\n  const data = useMemo(() => tableData, [tableData]);\n  const user = JSON.parse(localStorage.getItem(\"user\"))\n  const [gopageValue, setGopageValue] = useState()\n\n  const tableInstance = useTable(\n    {\n      columns, data,\n      initialState: { pageIndex: 0 }\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize }\n  } = tableInstance;\n\n  if (pageOptions.length < gopageValue) {\n    setGopageValue(pageOptions.length)\n  }\n\n  const textColor = useColorModeValue(\"gray.500\", \"white\");\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\n\n  const handleCheckboxChange = (event, value) => {\n    if (type === \"multi\") {\n      if (event.target.checked) {\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\n      } else {\n        setSelectedValues((prevSelectedValues) =>\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\n        );\n      }\n    } else {\n      if (event.target.checked) {\n        setSelectedValues(value);\n      } else {\n        setSelectedValues(null);\n      }\n    }\n  };\n\n\n  return (\n    <Card\n      direction='column'\n      w='100%'\n      px='0px'\n      style={{ border: '1px solid gray.200' }}\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\n        <Text\n          color={textColor}\n          fontSize='22px'\n          fontWeight='700'\n          lineHeight='100%'>\n          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)\n        </Text>\n      </Flex>\n      <Box overflowY={'auto'} className=\"table-container-property\" >\n        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\n          <Thead zIndex={1}>\n            {headerGroups?.map((headerGroup, index) => (\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\n                {headerGroup.headers.map((column, index) => (\n\n                  <Th\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\n                    pe=\"10px\"\n                    key={index}\n                    borderColor={borderColor}\n                  >\n                    <Flex\n                      align=\"center\"\n                      justifyContent={column.center ? \"center\" : \"start\"}\n                      fontSize={{ sm: \"14px\", lg: \"16px\" }}\n                      color=\" secondaryGray.900\"\n                    >\n                      <span style={{ textTransform: \"capitalize\", marginRight: \"8px\" }}>\n                        {column.render(\"Header\")}\n                      </span>\n\n                      {column.isSortable !== false && (\n                        <span>\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\n                        </span>\n                      )}\n                    </Flex>\n                  </Th>\n                ))}\n              </Tr>\n            ))}\n          </Thead>\n          <Tbody  {...getTableBodyProps()}>\n            {data?.length === 0 && (\n              <Tr>\n                <Td colSpan={columns.length}>\n                  <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                    -- No Data Found --\n                  </Text>\n                </Td>\n              </Tr>\n            )}\n            {page?.map((row, index) => {\n              prepareRow(row);\n              return (\n                <Tr {...row?.getRowProps()} key={index}>\n                  {row?.cells?.map((cell, index) => {\n                    let data = \"\";\n                    if (cell?.column.Header === \"#\") {\n                      data = (\n                        <Flex align=\"center\">\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                            {cell?.row?.index + 1}\n                          </Text>\n                        </Flex>\n                      );\n                    } else if (cell?.column.Header === \"title\") {\n                      data = (\n                        <Text\n                          me=\"10px\"\n                          color={textColor}\n                          fontSize=\"sm\"\n                          fontWeight=\"700\"\n                        >\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"first Name\") {\n                      data = (\n                        // <Link to={`/contactView/${cell?.row?.original._id}`}>\n                        <Text\n                          me=\"10px\"\n                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\n                          color={textColor}\n                          fontSize=\"sm\"\n                          fontWeight=\"700\"\n                        >\n                          {cell?.value}\n                        </Text>\n                        // </Link>\n                      );\n                    } else if (cell?.column.Header === \"last Name\") {\n                      data = (\n                        <Text\n                          me=\"10px\"\n                          color={textColor}\n                          fontSize=\"sm\"\n                          fontWeight=\"700\"\n                        >\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"phone Number\") {\n                      data = (\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\n                          color={textColor}>\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"Email Address\") {\n                      data = (\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\n                          color={textColor}>\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"physical Address\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"mailing Address\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    } else if (cell?.column.Header === \"Contact Method\") {\n                      data = (\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\n                          {cell?.value}\n                        </Text>\n                      );\n                    }\n                    return (\n                      <Td\n                        {...cell?.getCellProps()}\n                        key={index}\n                        fontSize={{ sm: \"14px\" }}\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\n                        borderColor='transparent'>\n                        {data}\n                      </Td>\n                    );\n                  })}\n                </Tr>\n              );\n            })}\n          </Tbody>\n        </Table>\n      </Box>\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\n\n    </Card>\n  );\n}\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport ContactTable from './Contact.js'\nimport Spinner from 'components/spinner/Spinner'\nimport { GiClick } from \"react-icons/gi\";\nimport CommonCheckTable from 'components/reactTable/checktable.js';\nimport { fetchContactCustomFiled } from '../../redux/slices/contactCustomFiledSlice.js';\nimport { fetchContactData } from '../../redux/slices/contactSlice.js';\nimport { useDispatch } from 'react-redux';\n\nconst ContactModel = (props) => {\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\n    const [selectedValues, setSelectedValues] = useState();\n    const [contactData, setContactData] = useState([]);\n    const [isLoding, setIsLoding] = useState(false)\n    const [columns, setColumns] = useState([]);\n    const dispatch = useDispatch();\n\n    const handleSubmit = async () => {\n        try {\n            setIsLoding(true)\n            setFieldValue(fieldName, selectedValues)\n            onClose()\n        }\n        catch (e) {\n            console.log(e)\n        }\n        finally {\n            setIsLoding(false)\n        }\n    }\n    const fetchCustomDataFields = async () => {\n        setIsLoding(true);\n        const result = await dispatch(fetchContactCustomFiled());\n        setContactData(result?.payload?.data);\n\n        const tempTableColumns = [\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\n            ...(result?.payload?.data?.[0]?.fields || [])\n                .filter(field => field?.isTableField === true)\n                .map(field => ({ Header: field?.label, accessor: field?.name }))\n        ];\n\n        setColumns(tempTableColumns);\n        setIsLoding(false);\n    };\n    useEffect(async () => {\n        await dispatch(fetchContactData())\n        fetchCustomDataFields();\n    }, []);\n    return (\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Select Contact</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    {isLoding ?\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\n                            <Spinner />\n                        </Flex>\n                        :\n                        <CommonCheckTable\n                            title={'Contacts'}\n                            isLoding={isLoding}\n                            columnData={columns ?? []}\n                            // dataColumn={columns ?? []}\n                            allData={data ?? []}\n                            tableData={data}\n                            tableCustomFields={contactData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\n                            AdvanceSearch={() => \"\"}\n                            ManageGrid={false}\n                            deleteMany={false}\n                            selectedValues={selectedValues}\n                            setSelectedValues={setSelectedValues}\n                            selectType=\"single\"\n                            customSearch={false}\n                        />\n                    }\n                </ModalBody>\n                <ModalFooter>\n                    <Button variant='brand' size='sm' me={2} onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n\n    )\n}\n\nexport default ContactModel\n","import { Button, Flex, FormLabel, Grid, GridItem, Heading, Input, List, ListItem, Text, VStack, useDisclosure } from '@chakra-ui/react';\nimport FolderTreeView from 'components/FolderTreeView/folderTreeView';\nimport Card from 'components/card/Card';\nimport { HSeparator } from 'components/separator/Separator';\nimport Spinner from 'components/spinner/Spinner';\nimport { constant } from 'constant';\nimport { useFormik } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { documentSchema } from 'schema';\nimport { deleteApi, getApi } from 'services/api';\nimport Upload from './component/Upload';\nimport { postApi } from 'services/api';\n\n\nconst Index = () => {\n\n    const [data, setData] = useState([])\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const [isLoding, setIsLoding] = useState(false)\n    const [linkDocument, setLinkDocument] = useState(false)\n\n    const fetchData = async () => {\n        setIsLoding(true)\n        let result = await getApi(user.role === 'superAdmin' ? 'api/document' : `api/document?createBy=${user._id}`);\n        setData(result?.data);\n        setIsLoding(false)\n    }\n\n    const initialValues = {\n        folderName: '',\n        files: '',\n        filename: '',\n        createBy: user._id\n    };\n\n    const formik = useFormik({\n        initialValues: initialValues,\n        validationSchema: documentSchema,\n        onSubmit: (values, { resetForm }) => {\n            AddData();\n        },\n    });\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\n    const navigate = useNavigate()\n\n    const download = async (data) => {\n        if (data) {\n            let result = await getApi(`api/document/download/`, data)\n            if (result && result.status === 200) {\n                window.open(`${constant.baseUrl}api/document/download/${data}`)\n                toast.success('File Download successful')\n            } else if (result && result.response.status === 404) {\n                toast.error('File Not Found')\n            }\n        }\n    }\n    const deleteFile = async (data) => {\n        if (data) {\n            let result = await deleteApi(`api/document/delete/`, data)\n            if (result && result.status === 200) {\n                fetchData()\n            }\n        }\n    }\n\n    const AddData = async () => {\n        try {\n            setIsLoding(true)\n            const formData = new FormData();\n            formData?.append('folderName', values.folderName);\n            formData?.append('createBy', values.createBy);\n            formData?.append('filename', values.filename);\n\n            // Append files to the formData\n            values.files.forEach((file) => {\n                formData?.append('files', file);\n            });\n\n            let response = await postApi('api/document/add', formData);\n            if (response && response.status === 200) {\n                fetchData();\n                formik.resetForm();\n            }\n        } catch (e) {\n            console.log(e);\n        }\n        finally {\n            setIsLoding(false)\n        }\n    };\n\n    useEffect(() => {\n        fetchData()\n    }, [linkDocument, handleSubmit])\n\n    return (\n        <div>\n            <Grid templateColumns=\"repeat(12, 1fr)\" mb={3} gap={2}>\n                <GridItem colSpan={{ base: 12, md: 7 }}  >\n                    <Card minH={'20em'}>\n                        <Heading size=\"lg\" mb={4} >\n                            File Explorer\n                        </Heading>\n                        <HSeparator />\n                        <VStack mt={4} alignItems=\"flex-start\">\n                            {isLoding ?\n                                <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\n                                    <Spinner />\n                                </Flex>\n                                : data?.length === 0 ? (\n                                    <Text textAlign={'center'} width=\"100%\" fontSize=\"sm\" fontWeight=\"700\">\n                                        -- No Document Found --\n                                    </Text>\n                                ) : data?.map((item) => (\n                                    <FolderTreeView name={item.folderName} item={item}>\n                                        {item?.files?.map((file) => (\n                                            <FolderTreeView download={download} setLinkDocument={setLinkDocument} deleteFile={deleteFile} data={file} name={file.fileName} isFile />\n                                        ))}\n                                    </FolderTreeView>\n                                ))}\n                        </VStack>\n                    </Card>\n                </GridItem>\n                <GridItem colSpan={{ base: 12, md: 5 }} colStart={{ base: 1, md: 8 }} >\n                    <Card >\n                        <GridItem colSpan={{ base: 12 }} >\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                Folder Name<Text color={\"red\"}>*</Text>\n                            </FormLabel>\n                            <Input\n                                onFocus={onOpen}\n                                fontSize='sm'\n                                onChange={handleChange}\n                                onBlur={() => setTimeout(onClose, 200)}\n                                value={values.folderName}\n                                name=\"folderName\"\n                                placeholder='Enter Folder Name'\n                                fontWeight='500'\n                                borderColor={errors?.folderName && touched?.folderName ? \"red.300\" : null}\n                            />\n                            {isOpen && values?.folderName && data?.filter((option) => option?.folderName?.toLowerCase()?.includes(values?.folderName.toLowerCase())).length > 0 && (\n                                <List position={'relative'} border={'1px solid'} bg={'gray.100'} width={'100%'} borderRadius={'0px 0px 20px 20px'} lineHeight={1} >\n                                    {data?.filter((option) => option?.folderName?.toLowerCase()?.includes(values?.folderName.toLowerCase())).map((option, index) => (\n                                        <ListItem p={3} borderBottom={'2px solid #efefef'} sx={{ '&:last-child': { borderBottom: 'none' } }} key={option?._id} cursor={'pointer'}\n                                            onClick={() => {\n                                                setFieldValue('folderName', option?.folderName)\n                                            }}\n                                        >\n                                            {option?.folderName}\n                                        </ListItem>\n                                    ))}\n                                </List>\n                            )}\n                            <Text mb='10px' color={'red'}> {errors.folderName && touched.folderName && errors.folderName}</Text>\n                        </GridItem>\n                        <GridItem colSpan={{ base: 12 }} >\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\n                                File Name\n                            </FormLabel>\n                            <Input\n                                fontSize='sm'\n                                onChange={handleChange}\n                                onBlur={() => setTimeout(onClose, 200)}\n                                value={values.filename}\n                                name=\"filename\"\n                                placeholder='Enter File Name'\n                                fontWeight='500'\n                                borderColor={errors?.filename && touched?.filename ? \"red.300\" : null}\n                            />\n                            <Text mb='10px' color={'red'}> {errors.filename && touched.filename && errors.filename}</Text>\n                        </GridItem>\n                        <Upload count={values.files.length} onFileSelect={(file) => setFieldValue('files', file)} />\n                        <Button size=\"sm\" disabled={isLoding ? true : false} onClick={handleSubmit} variant='brand' fontWeight='500'>\n                            {isLoding ? <Spinner /> : 'Publish now'}\n                        </Button>\n                    </Card>\n                </GridItem>\n\n            </Grid>\n\n\n        </div>\n    )\n}\n\nexport default Index\n","import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'\nimport React, { useEffect, useState } from 'react'\nimport Spinner from 'components/spinner/Spinner'\nimport { GiClick } from \"react-icons/gi\";\nimport CommonCheckTable from 'components/reactTable/checktable';\nimport { fetchLeadCustomFiled } from '../../redux/slices/leadCustomFiledSlice';\nimport { useDispatch } from 'react-redux';\nimport { fetchLeadData } from '../../redux/slices/leadSlice';\n\nconst ContactModel = (props) => {\n    const { onClose, isOpen, fieldName, setFieldValue, data } = props\n    const title = \"Leads\";\n    const dispatch = useDispatch();\n\n    const [isLoding, setIsLoding] = useState(false);\n    const [columns, setColumns] = useState([]);\n    const [leadData, setLeadData] = useState([]);\n    const [selectedValues, setSelectedValues] = useState([]);\n\n    const handleSubmit = async () => {\n        try {\n            setIsLoding(true)\n            setFieldValue(fieldName, selectedValues)\n            onClose()\n        }\n        catch (e) {\n            console.log(e)\n        }\n        finally {\n            setIsLoding(false)\n        }\n    }\n\n    const fetchCustomDataFields = async () => {\n        setIsLoding(true);\n\n        const result = await dispatch(fetchLeadCustomFiled());\n        setLeadData(result?.payload?.data);\n\n        const tempTableColumns = [\n            { Header: \"#\", accessor: \"_id\", isSortable: false, width: 10 },\n            {\n                Header: \"Status\", accessor: \"leadStatus\", isSortable: true, center: true,\n                cell: ({ row }) => (\n                    row.original.leadStatus\n                )\n            },\n            ...(result?.payload?.data?.[0]?.fields?.filter((field) => field?.isTableField === true)?.map((field) => (field?.name !== \"leadStatus\" && { Header: field?.label, accessor: field?.name })) || []),\n        ];\n\n        setColumns(tempTableColumns);\n        setIsLoding(false);\n    }\n\n    useEffect(() => {\n        dispatch(fetchLeadData())\n        fetchCustomDataFields();\n    }, [])\n\n    return (\n        <Modal onClose={onClose} size='full' isOpen={isOpen} >\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>Select Lead</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    {isLoding ?\n                        <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\n                            <Spinner />\n                        </Flex> :\n                        <CommonCheckTable\n                            title={title}\n                            isLoding={isLoding}\n                            columnData={columns ?? []}\n                            // dataColumn={columns ?? []}\n                            allData={data ?? []}\n                            tableData={data}\n                            tableCustomFields={leadData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}\n                            AdvanceSearch={() => \"\"}\n                            ManageGrid={false}\n                            deleteMany={false}\n                            selectedValues={selectedValues}\n                            setSelectedValues={setSelectedValues}\n                            selectType=\"single\"\n                            customSearch={false}\n                        />\n                    }\n                </ModalBody>\n                <ModalFooter>\n                    <Button variant='brand' size='sm' me={2} disabled={isLoding ? true : false} leftIcon={<GiClick />} onClick={handleSubmit}> {isLoding ? <Spinner /> : 'Select'}</Button>\n                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n\n    )\n}\n\nexport default ContactModel\n"],"names":["Upload","props","used","total","count","textColorPrimary","_objectWithoutProperties","_excluded","useColorModeValue","brandColor","_jsxs","Grid","templateColumns","mb","gap","children","_jsx","GridItem","colSpan","base","Dropzone","w","me","minH","height","onFileSelect","content","Box","Icon","as","MdUpload","h","color","Flex","justify","mx","Text","fontSize","fontWeight","direction","textAlign","mt","my","Modal","onClose","isOpen","isCentered","ModalOverlay","ModalContent","ModalHeader","method","ModalCloseButton","ModalBody","ModalFooter","Button","size","colorScheme","mr","onClick","async","deleteFile","id","deleteManyApi","url","data","status","setSelectedValues","error","console","log","variant","handleClose","setLinkDocument","isLoding","setIsLoding","useState","setData","contactModelOpen","setContactModel","leadModelOpen","setLeadModel","user","JSON","parse","localStorage","getItem","formik","useFormik","initialValues","linkWith","linkContact","linkLead","onSubmit","values","_ref","resetForm","handleClick","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","response","postApi","concat","_response$response$da","pre","toast","message","useEffect","result","getApi","role","_id","createBy","prevData","_result$data","map","item","label","firstName","lastName","value","_result$data2","leadName","fetchData","_Fragment","FormLabel","display","ms","RadioGroup","onChange","e","Stack","Radio","Select","name","undefined","placeholder","borderColor","IconButton","ml","icon","LiaMousePointerSolid","rightIcon","LinkIcon","ContactModel","fieldName","LeadModel","download","isFile","from","setIsOpen","deleteModel","setDelete","linkModel","setLinkModel","setId","navigate","useNavigate","isFolder","List","width","ListItem","alignItems","justifyContent","handleToggle","_hover","cursor","textDecoration","ListIcon","FiFile","FcOpenedFolder","FiChevronDown","FiChevronRight","createByName","Menu","isLazy","MenuButton","CiMenuKebab","MenuList","position","right","pl","minW","MenuItem","pr","IoIosContact","MdLeaderboard","handleLinkClick","urlExtension","substring","lastIndexOf","toLowerCase","includes","isImageUrl","img","window","open","ViewIcon","DownloadIcon","deletedata","DeleteIcon","Delete","LinkModel","Collapse","in","animateOpacity","styleType","ContactTable","columnsData","tableData","title","type","selectedValues","columns","useMemo","gopageValue","setGopageValue","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","length","textColor","handleCheckboxChange","event","target","checked","prevSelectedValues","filter","selectedValue","Card","px","style","border","overflowX","sm","lg","align","lineHeight","CountUpComponent","targetNumber","overflowY","className","Table","_objectSpread","Thead","zIndex","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","isSortable","getSortByToggleProps","pe","center","textTransform","marginRight","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","row","_row$cells","getRowProps","cells","cell","_cell$row","Header","Checkbox","isChecked","getCellProps","md","Pagination","_contactData$","_contactData$$fields","contactData","setContactData","setColumns","dispatch","useDispatch","fetchContactData","_result$payload","_result$payload2","_result$payload2$data","_result$payload2$data2","fetchContactCustomFiled","payload","tempTableColumns","accessor","fields","field","isTableField","fetchCustomDataFields","Spinner","CommonCheckTable","columnData","allData","tableCustomFields","AdvanceSearch","ManageGrid","deleteMany","selectType","customSearch","disabled","leftIcon","GiClick","Index","onOpen","useDisclosure","linkDocument","folderName","files","filename","validationSchema","documentSchema","AddData","constant","baseUrl","success","deleteApi","formData","FormData","append","forEach","file","Heading","HSeparator","VStack","_item$files","FolderTreeView","fileName","colStart","Input","onFocus","onBlur","setTimeout","option","_option$folderName","_option$folderName$to","bg","borderRadius","_option$folderName2","_option$folderName2$t","p","borderBottom","sx","_leadData$","_leadData$$fields","leadData","setLeadData","fetchLeadData","_result$payload2$data3","_result$payload2$data4","fetchLeadCustomFiled","original","leadStatus"],"sourceRoot":""}